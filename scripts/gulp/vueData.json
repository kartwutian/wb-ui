{"action-sheet":{"wxml":"<wxs src=\"../wxs/utils.wxs\" module=\"utils\" />\n\n<van-popup\n  show=\"{{ show }}\"\n  position=\"bottom\"\n  round=\"{{ round }}\"\n  z-index=\"{{ zIndex }}\"\n  overlay=\"{{ overlay }}\"\n  custom-class=\"van-action-sheet\"\n  safe-area-inset-bottom=\"{{ safeAreaInsetBottom }}\"\n  close-on-click-overlay=\"{{ closeOnClickOverlay }}\"\n  bind:close=\"onClickOverlay\"\n>\n  <view wx:if=\"{{ title }}\" class=\"van-hairline--bottom van-action-sheet__header\">\n    {{ title }}\n    <van-icon\n      name=\"close\"\n      custom-class=\"van-action-sheet__close\"\n      bind:click=\"onClose\"\n    />\n  </view>\n  <view wx:if=\"{{ description }}\" class=\"van-action-sheet__description\">\n    {{ description }}\n  </view>\n  <view wx:if=\"{{ actions && actions.length }}\">\n    <!-- button外包一层view，防止actions动态变化，导致渲染时button被打散 -->\n    <button\n      wx:for=\"{{ actions }}\"\n      wx:key=\"index\"\n      open-type=\"{{ item.openType }}\"\n      style=\"{{ item.color ? 'color: ' + item.color : '' }}\"\n      class=\"{{ utils.bem('action-sheet__item', { disabled: item.disabled || item.loading }) }} van-hairline--top {{ item.className || '' }}\"\n      hover-class=\"van-action-sheet__item--hover\"\n      data-index=\"{{ index }}\"\n      bind:tap=\"onSelect\"\n    >\n      <block wx:if=\"{{ !item.loading }}\">\n        {{ item.name }}\n        <text wx:if=\"{{ item.subname }}\" class=\"van-action-sheet__subname\" >{{ item.subname }}</text>\n      </block>\n      <van-loading wx:else size=\"20px\" />\n    </button>\n  </view>\n  <slot />\n  <view\n    wx:if=\"{{ cancelText }}\"\n    class=\"van-action-sheet__cancel\"\n    hover-class=\"van-action-sheet__cancel--hover\"\n    hover-stay-time=\"70\"\n    bind:tap=\"onCancel\"\n  >\n    {{ cancelText }}\n  </view>\n</van-popup>\n","ts":"import { VantComponent } from '../common/component';\nimport { Weapp } from 'definitions/weapp';\n\nVantComponent({\n  props: {\n    show: Boolean,\n    title: String,\n    cancelText: String,\n    description: String,\n    round: {\n      type: Boolean,\n      value: true\n    },\n    zIndex: {\n      type: Number,\n      value: 100\n    },\n    actions: {\n      type: Array,\n      value: []\n    },\n    overlay: {\n      type: Boolean,\n      value: true\n    },\n    closeOnClickOverlay: {\n      type: Boolean,\n      value: true\n    },\n    closeOnClickAction: {\n      type: Boolean,\n      value: true\n    },\n    safeAreaInsetBottom: {\n      type: Boolean,\n      value: true\n    }\n  },\n\n  methods: {\n    onSelect(event: Weapp.Event) {\n      const { index } = event.currentTarget.dataset;\n      const item = this.data.actions[index];\n      if (item && !item.disabled && !item.loading) {\n        this.$emit('select', item);\n\n        if (this.data.closeOnClickAction) {\n          this.onClose();\n        }\n      }\n    },\n\n    onCancel() {\n      this.$emit('cancel');\n    },\n\n    onClose() {\n      this.$emit('close');\n    },\n\n    onClickOverlay() {\n      this.$emit('click-overlay');\n      this.onClose();\n    }\n  }\n});\n"},"area":{"ts":"import { VantComponent } from '../common/component';\nimport { pickerProps } from '../picker/shared';\nimport { Weapp } from 'definitions/weapp';\n\ntype AreaItem = {\n  name: string;\n  code: string;\n};\n\nconst COLUMNSPLACEHOLDERCODE = '000000';\n\nVantComponent({\n  classes: ['active-class', 'toolbar-class', 'column-class'],\n\n  props: {\n    ...pickerProps,\n    value: String,\n    areaList: {\n      type: Object,\n      value: {}\n    },\n    columnsNum: {\n      type: null,\n      value: 3\n    },\n    columnsPlaceholder: {\n      type: Array,\n      observer(val) {\n        this.setData({\n          typeToColumnsPlaceholder: {\n            province: val[0] || '',\n            city: val[1] || '',\n            county: val[2] || '',\n          }\n        });\n      }\n    }\n  },\n\n  data: {\n    columns: [{ values: [] }, { values: [] }, { values: [] }],\n    displayColumns: [{ values: [] }, { values: [] }, { values: [] }],\n    typeToColumnsPlaceholder: {}\n  },\n\n  watch: {\n    value(value: string) {\n      this.code = value;\n      this.setValues();\n    },\n\n    areaList: 'setValues',\n\n    columnsNum(value: number) {\n      this.setData({\n        displayColumns: this.data.columns.slice(0, +value)\n      });\n    }\n  },\n\n  mounted() {\n    setTimeout(() => {\n      this.setValues();\n    }, 0);\n  },\n\n  methods: {\n    getPicker() {\n      if (this.picker == null) {\n        this.picker = this.selectComponent('.van-area__picker');\n      }\n      return this.picker;\n    },\n\n    onCancel(event: Weapp.Event) {\n      this.emit('cancel', event.detail);\n    },\n\n    onConfirm(event: Weapp.Event) {\n      const { index } = event.detail;\n      let { value } = event.detail;\n      value = this.parseOutputValues(value);\n      this.emit('confirm', { value, index });\n    },\n\n    emit(type: string, detail) {\n      detail.values = detail.value;\n      delete detail.value;\n      this.$emit(type, detail);\n    },\n\n    // parse output columns data\n    parseOutputValues(values) {\n      const { columnsPlaceholder } = this.data;\n      return values.map((value, index) => {\n        // save undefined value\n        if (!value) return value;\n\n        value = JSON.parse(JSON.stringify(value));\n        if (!value.code || value.name === columnsPlaceholder[index]) {\n          value.code = '';\n          value.name = '';\n        }\n        return value;\n      });\n    },\n\n    onChange(event: Weapp.Event) {\n      const { index, picker, value } = event.detail;\n      this.code = value[index].code;\n      let getValues = picker.getValues();\n      getValues = this.parseOutputValues(getValues);\n      this.setValues().then(() => {\n        this.$emit('change', {\n          picker,\n          values: getValues,\n          index\n        });\n      });\n    },\n\n    getConfig(type: string) {\n      const { areaList } = this.data;\n      return (areaList && areaList[`${type}_list`]) || {};\n    },\n\n    getList(type: string, code?: string): AreaItem[] {\n      const { typeToColumnsPlaceholder } = this.data;\n      let result = [];\n      if (type !== 'province' && !code) {\n        return result;\n      }\n\n      const list = this.getConfig(type);\n      result = Object.keys(list).map(code => ({\n        code,\n        name: list[code]\n      }));\n\n      if (code) {\n        // oversea code\n        if (code[0] === '9' && type === 'city') {\n          code = '9';\n        }\n\n        result = result.filter(item => item.code.indexOf(code) === 0);\n      }\n\n      if (typeToColumnsPlaceholder[type] && result.length) {\n        // set columns placeholder\n        const codeFill = type === 'province' ? '' : type === 'city' ? COLUMNSPLACEHOLDERCODE.slice(2, 4) : COLUMNSPLACEHOLDERCODE.slice(4, 6);\n        result.unshift({\n          code: `${code}${codeFill}`,\n          name: typeToColumnsPlaceholder[type]\n        });\n      }\n\n      return result;\n    },\n\n    getIndex(type: string, code: string): number {\n      let compareNum = type === 'province' ? 2 : type === 'city' ? 4 : 6;\n      const list = this.getList(type, code.slice(0, compareNum - 2));\n\n      // oversea code\n      if (code[0] === '9' && type === 'province') {\n        compareNum = 1;\n      }\n\n      code = code.slice(0, compareNum);\n      for (let i = 0; i < list.length; i++) {\n        if (list[i].code.slice(0, compareNum) === code) {\n          return i;\n        }\n      }\n\n      return 0;\n    },\n\n    setValues() {\n      const county = this.getConfig('county');\n      let { code } = this;\n\n      if (!code) {\n        if (this.data.columnsPlaceholder.length) {\n          code = COLUMNSPLACEHOLDERCODE;\n        } else if (Object.keys(county)[0]) {\n          code = Object.keys(county)[0];\n        } else {\n          code = '';\n        }\n      }\n\n      const province = this.getList('province');\n      const city = this.getList('city', code.slice(0, 2));\n\n      const picker = this.getPicker();\n\n      if (!picker) {\n        return;\n      }\n\n      const stack = [];\n\n      stack.push(picker.setColumnValues(0, province, false));\n      stack.push(picker.setColumnValues(1, city, false));\n\n      if (city.length && code.slice(2, 4) === '00') {\n        [{ code }] = city;\n      }\n\n      stack.push(\n        picker.setColumnValues(\n          2,\n          this.getList('county', code.slice(0, 4)),\n          false\n        )\n      );\n\n      return Promise.all(stack)\n        .catch(() => {})\n        .then(() =>\n          picker.setIndexes([\n            this.getIndex('province', code),\n            this.getIndex('city', code),\n            this.getIndex('county', code)\n          ])\n        )\n        .catch(() => {});\n    },\n\n    getValues() {\n      const picker = this.getPicker();\n      return picker ? picker.getValues().filter(value => !!value) : [];\n    },\n\n    getDetail() {\n      const values = this.getValues();\n      const area = {\n        code: '',\n        country: '',\n        province: '',\n        city: '',\n        county: ''\n      };\n\n      if (!values.length) {\n        return area;\n      }\n\n      const names = values.map((item: AreaItem) => item.name);\n      area.code = values[values.length - 1].code;\n      if (area.code[0] === '9') {\n        area.country = names[1] || '';\n        area.province = names[2] || '';\n      } else {\n        area.province = names[0] || '';\n        area.city = names[1] || '';\n        area.county = names[2] || '';\n      }\n\n      return area;\n    },\n\n    reset(code) {\n      this.code = code || '';\n      return this.setValues();\n    }\n  }\n});\n","wxml":"<van-picker\n  class=\"van-area__picker\"\n  active-class=\"active-class\"\n  toolbar-class=\"toolbar-class\"\n  column-class=\"column-class\"\n  show-toolbar\n  value-key=\"name\"\n  title=\"{{ title }}\"\n  loading=\"{{ loading }}\"\n  columns=\"{{ displayColumns }}\"\n  item-height=\"{{ itemHeight }}\"\n  visible-item-count=\"{{ visibleItemCount }}\"\n  cancel-button-text=\"{{ cancelButtonText }}\"\n  confirm-button-text=\"{{ confirmButtonText }}\"\n  bind:change=\"onChange\"\n  bind:confirm=\"onConfirm\"\n  bind:cancel=\"onCancel\"\n/>\n"},"button":{"wxml":"<wxs src=\"../wxs/utils.wxs\" module=\"utils\" />\n\n<button\n  id=\"{{ id }}\"\n  class=\"custom-class {{ utils.bem('button', [type, size, { block, round, plain, square, loading, disabled, hairline, unclickable: disabled || loading }]) }} {{ hairline ? 'van-hairline--surround' : '' }}\"\n  hover-class=\"van-button--active hover-class\"\n  lang=\"{{ lang }}\"\n  style=\"{{ style }} {{ customStyle }}\"\n  open-type=\"{{ openType }}\"\n  business-id=\"{{ businessId }}\"\n  session-from=\"{{ sessionFrom }}\"\n  send-message-title=\"{{ sendMessageTitle }}\"\n  send-message-path=\"{{ sendMessagePath }}\"\n  send-message-img=\"{{ sendMessageImg }}\"\n  show-message-card=\"{{ showMessageCard }}\"\n  app-parameter=\"{{ appParameter }}\"\n  aria-label=\"{{ ariaLabel }}\"\n  bindtap=\"onClick\"\n  bindgetuserinfo=\"bindGetUserInfo\"\n  bindcontact=\"bindContact\"\n  bindgetphonenumber=\"bindGetPhoneNumber\"\n  binderror=\"bindError\"\n  bindlaunchapp=\"bindLaunchApp\"\n  bindopensetting=\"bindOpenSetting\"\n>\n  <block wx:if=\"{{ loading }}\">\n    <van-loading\n      custom-class=\"loading-class\"\n      size=\"{{ loadingSize }}\"\n      type=\"{{ loadingType }}\"\n      color=\"{{ type === 'default' ? '#c9c9c9' : '' }}\"\n    />\n    <view\n      wx:if=\"{{ loadingText }}\"\n      class=\"van-button__loading-text\"\n    >\n      {{ loadingText }}\n    </view>\n  </block>\n  <block wx:else>\n    <van-icon\n      wx:if=\"{{ icon }}\"\n      size=\"1.2em\"\n      name=\"{{ icon }}\"\n      class=\"van-button__icon\"\n      custom-style=\"line-height: inherit;\"\n    />\n    <view class=\"van-button__text\">\n      <slot />\n    </view>\n  </block>\n</button>\n","ts":"import { VantComponent } from '../common/component';\nimport { button } from '../mixins/button';\nimport { openType } from '../mixins/open-type';\n\nVantComponent({\n  mixins: [button, openType],\n\n  classes: ['hover-class', 'loading-class'],\n\n  data: {\n    style: ''\n  },\n\n  props: {\n    icon: String,\n    plain: Boolean,\n    block: Boolean,\n    round: Boolean,\n    square: Boolean,\n    loading: Boolean,\n    hairline: Boolean,\n    disabled: Boolean,\n    loadingText: String,\n    customStyle: String,\n    loadingType: {\n      type: String,\n      value: 'circular'\n    },\n    type: {\n      type: String,\n      value: 'default'\n    },\n    size: {\n      type: String,\n      value: 'normal'\n    },\n    loadingSize: {\n      type: String,\n      value: '20px'\n    },\n    color: {\n      type: String,\n      observer(color: string) {\n        let style = '';\n\n        if (color) {\n          style += `color: ${this.data.plain ? color : 'white'};`;\n\n          if (!this.data.plain) {\n            // Use background instead of backgroundColor to make linear-gradient work\n            style += `background: ${color};`;\n          }\n\n          // hide border when color is linear-gradient\n          if (color.indexOf('gradient') !== -1) {\n            style += 'border: 0;';\n          } else {\n            style += `border-color: ${color};`;\n          }\n        }\n\n        if (style !== this.data.style) {\n          this.setData({ style });\n        }\n      }\n    }\n  },\n\n  methods: {\n    onClick() {\n      if (!this.data.disabled && !this.data.loading) {\n        this.$emit('click');\n      }\n    }\n  }\n});\n"},"cell":{"ts":"import { link } from '../mixins/link';\nimport { VantComponent } from '../common/component';\nimport { Weapp } from 'definitions/weapp';\n\nVantComponent({\n  classes: [\n    'title-class',\n    'label-class',\n    'value-class',\n    'right-icon-class',\n    'hover-class'\n  ],\n\n  mixins: [link],\n\n  props: {\n    title: null,\n    value: null,\n    icon: String,\n    size: String,\n    label: String,\n    center: Boolean,\n    isLink: Boolean,\n    required: Boolean,\n    clickable: Boolean,\n    titleWidth: String,\n    customStyle: String,\n    arrowDirection: String,\n    useLabelSlot: Boolean,\n    border: {\n      type: Boolean,\n      value: true\n    }\n  },\n\n  methods: {\n    onClick(event: Weapp.Event) {\n      this.$emit('click', event.detail);\n      this.jumpLink();\n    }\n  }\n});\n","wxml":"<wxs src=\"../wxs/utils.wxs\" module=\"utils\" />\n\n<view\n  class=\"custom-class {{ utils.bem('cell', [size, { center, required, borderless: !border, clickable: isLink || clickable }]) }}\"\n  hover-class=\"van-cell--hover hover-class\"\n  hover-stay-time=\"70\"\n  style=\"{{ customStyle }}\"\n  bind:tap=\"onClick\"\n>\n  <van-icon\n    wx:if=\"{{ icon }}\"\n    name=\"{{ icon }}\"\n    class=\"van-cell__left-icon-wrap\"\n    custom-class=\"van-cell__left-icon\"\n  />\n  <slot wx:else name=\"icon\" />\n\n  <view\n    style=\"{{ titleWidth ? 'max-width:' + titleWidth + ';min-width:' + titleWidth : '' }}\"\n    class=\"van-cell__title title-class\"\n  >\n    <block wx:if=\"{{ title }}\">{{ title }}</block>\n    <slot wx:else name=\"title\" />\n\n    <view wx:if=\"{{ label || useLabelSlot }}\" class=\"van-cell__label label-class\">\n      <slot wx:if=\"{{ useLabelSlot }}\" name=\"label\" />\n      <block wx:elif=\"{{ label }}\">{{ label }}</block>\n    </view>\n  </view>\n\n  <view class=\"van-cell__value value-class\">\n    <block wx:if=\"{{ value || value === 0 }}\">{{ value }}</block>\n    <slot wx:else />\n  </view>\n\n  <van-icon\n    wx:if=\"{{ isLink }}\"\n    name=\"{{ arrowDirection ? 'arrow' + '-' + arrowDirection : 'arrow' }}\"\n    class=\"van-cell__right-icon-wrap right-icon-class\"\n    custom-class=\"van-cell__right-icon\"\n  />\n  <slot wx:else name=\"right-icon\" />\n\n  <slot name=\"extra\" />\n</view>\n"},"cell-group":{"ts":"import { VantComponent } from '../common/component';\n\nVantComponent({\n  props: {\n    title: String,\n    border: {\n      type: Boolean,\n      value: true\n    }\n  }\n});\n","wxml":"<view\n  wx:if=\"{{ title }}\"\n  class=\"van-cell-group__title\"\n>\n  {{ title }}\n</view>\n<view class=\"custom-class van-cell-group {{ border ? 'van-hairline--top-bottom' : '' }}\">\n  <slot />\n</view>\n"},"card":{"ts":"import { link } from '../mixins/link';\nimport { VantComponent } from '../common/component';\n\nVantComponent({\n  classes: [\n    'num-class',\n    'desc-class',\n    'thumb-class',\n    'title-class',\n    'price-class',\n    'origin-price-class',\n  ],\n\n  mixins: [link],\n\n  props: {\n    tag: String,\n    num: String,\n    desc: String,\n    thumb: String,\n    title: String,\n    price: String,\n    centered: Boolean,\n    lazyLoad: Boolean,\n    thumbLink: String,\n    originPrice: String,\n    thumbMode: {\n      type: String,\n      value: 'aspectFit'\n    },\n    currency: {\n      type: String,\n      value: '¥'\n    }\n  },\n\n  methods: {\n    onClickThumb() {\n      this.jumpLink('thumbLink');\n    }\n  }\n});\n","wxml":"<wxs src=\"../wxs/utils.wxs\" module=\"utils\" />\n\n<view class=\"custom-class van-card\">\n  <view class=\"{{ utils.bem('card__header', { center: centered }) }}\">\n    <view class=\"van-card__thumb\" bind:tap=\"onClickThumb\">\n      <image\n        wx:if=\"{{ thumb }}\"\n        src=\"{{ thumb }}\"\n        mode=\"{{ thumbMode }}\"\n        lazy-load=\"{{ lazyLoad }}\"\n        class=\"van-card__img thumb-class\"\n      />\n      <slot name=\"thumb\" />\n      <van-tag\n        wx:if=\"{{ tag }}\"\n        mark\n        type=\"danger\"\n        custom-class=\"van-card__tag\"\n      >\n        {{ tag }}\n      </van-tag>\n    </view>\n\n    <view class=\"van-card__content\">\n      <view wx:if=\"{{ title }}\" class=\"van-card__title title-class\">{{ title }}</view>\n      <slot wx:else name=\"title\" />\n\n      <view wx:if=\"{{ desc }}\" class=\"van-card__desc desc-class\">{{ desc }}</view>\n      <slot wx:else name=\"desc\" />\n\n      <slot name=\"tags\" />\n\n      <view class=\"van-card__bottom\">\n        <view wx:if=\"{{ price || price === 0 }}\" class=\"van-card__price price-class\">{{ currency }} {{ price }}</view>\n        <view wx:if=\"{{ originPrice || originPrice === 0 }}\" class=\"van-card__origin-price origin-price-class\">{{ currency }} {{ originPrice }}</view>\n        <view wx:if=\"{{ num }}\" class=\"van-card__num num-class\">x {{ num }}</view>\n        <slot name=\"bottom\" />\n      </view>\n    </view>\n  </view>\n\n  <view class=\"van-card__footer\">\n    <slot name=\"footer\" />\n  </view>\n</view>\n"},"checkbox-group":{"ts":"import { VantComponent } from '../common/component';\n\nVantComponent({\n  field: true,\n\n  relation: {\n    name: 'checkbox',\n    type: 'descendant',\n    linked(target) {\n      this.children = this.children || [];\n      this.children.push(target);\n      this.updateChild(target);\n    },\n    unlinked(target) {\n      this.children = this.children.filter(\n        (child: WechatMiniprogram.Component.TrivialInstance) => child !== target\n      );\n    }\n  },\n\n  props: {\n    max: Number,\n    value: {\n      type: Array,\n      observer: 'updateChildren'\n    },\n    disabled: {\n      type: Boolean,\n      observer: 'updateChildren'\n    }\n  },\n\n  methods: {\n    updateChildren() {\n      (this.children || []).forEach((child: WechatMiniprogram.Component.TrivialInstance) =>\n        this.updateChild(child)\n      );\n    },\n\n    updateChild(child: WechatMiniprogram.Component.TrivialInstance) {\n      const { value, disabled } = this.data;\n      child.setData({\n        value: value.indexOf(child.data.name) !== -1,\n        disabled: disabled || child.data.disabled\n      });\n    }\n  }\n});\n","wxml":"<slot />\n"},"circle":{"ts":"import { VantComponent } from '../common/component';\nimport { isObj } from '../common/utils';\nimport { BLUE, WHITE } from '../common/color';\n\nfunction format(rate) {\n  return Math.min(Math.max(rate, 0), 100);\n}\nconst PERIMETER = 2 * Math.PI;\nconst BEGIN_ANGLE = -Math.PI / 2;\nconst STEP = 1;\n\nVantComponent({\n  props: {\n    text: String,\n    lineCap: {\n      type: String,\n      value: 'round'\n    },\n    value: {\n      type: Number,\n      value: 0,\n      observer: 'reRender'\n    },\n    speed: {\n      type: Number,\n      value: 50\n    },\n    size: {\n      type: Number,\n      value: 100,\n      observer: 'setStyle'\n    },\n    fill: String,\n    layerColor: {\n      type: String,\n      value: WHITE\n    },\n    color: {\n      type: [String, Object],\n      value: BLUE,\n      observer: 'setHoverColor'\n    },\n    strokeWidth: {\n      type: Number,\n      value: 4\n    },\n    clockwise: {\n      type: Boolean,\n      value: true\n    }\n  },\n\n  data: {\n    style: 'width: 100px; height: 100px;',\n    hoverColor: BLUE\n  },\n\n  methods: {\n    getContext() {\n      if (!this.ctx) {\n        this.ctx = wx.createCanvasContext('van-circle', this);\n      }\n      return this.ctx;\n    },\n\n    setHoverColor() {\n      const context = this.getContext();\n      const { color, size } = this.data;\n      let hoverColor = color;\n\n      if (isObj(color)) {\n        const LinearColor = context.createLinearGradient(size, 0, 0, 0);\n        Object.keys(color)\n          .sort((a, b) => parseFloat(a) - parseFloat(b))\n          .map(key => LinearColor.addColorStop(parseFloat(key) / 100, color[key]));\n        hoverColor = LinearColor;\n      }\n\n      this.setData({ hoverColor });\n    },\n\n    setStyle() {\n      const { size } = this.data;\n      const style = `width: ${size}px; height: ${size}px;`;\n\n      this.setData({ style });\n    },\n\n    presetCanvas(context, strokeStyle, beginAngle, endAngle, fill) {\n      const { strokeWidth, lineCap, clockwise, size } = this.data;\n      const position = size / 2;\n      const radius = position - strokeWidth / 2;\n\n      context.setStrokeStyle(strokeStyle);\n      context.setLineWidth(strokeWidth);\n      context.setLineCap(lineCap);\n      context.beginPath();\n      context.arc(position, position, radius, beginAngle, endAngle, !clockwise);\n      context.stroke();\n\n      if (fill) {\n        context.setFillStyle(fill);\n        context.fill();\n      }\n    },\n\n    renderLayerCircle(context) {\n      const { layerColor, fill } = this.data;\n      this.presetCanvas(context, layerColor, 0, PERIMETER, fill);\n    },\n\n    renderHoverCircle(context, formatValue) {\n      const { clockwise, hoverColor } = this.data;\n      // 结束角度\n      const progress = PERIMETER * (formatValue / 100);\n      const endAngle = clockwise\n        ? BEGIN_ANGLE + progress\n        : 3 * Math.PI - (BEGIN_ANGLE + progress);\n\n      this.presetCanvas(context, hoverColor, BEGIN_ANGLE, endAngle);\n    },\n\n    drawCircle(currentValue) {\n      const context = this.getContext();\n      const { size } = this.data;\n      context.clearRect(0, 0, size, size);\n      this.renderLayerCircle(context);\n\n      const formatValue = format(currentValue);\n      if (formatValue !== 0) {\n        this.renderHoverCircle(context, formatValue);\n      }\n\n      context.draw();\n    },\n\n    reRender() {\n      // tofector 动画暂时没有想到好的解决方案\n      const { value, speed } = this.data;\n\n      if (speed <= 0 || speed > 1000) {\n        this.drawCircle(value);\n        return;\n      }\n\n      this.clearInterval();\n      this.currentValue = this.currentValue || 0;\n      this.interval = setInterval(() => {\n        if (this.currentValue !== value) {\n          if (this.currentValue < value) {\n            this.currentValue += STEP;\n          } else {\n            this.currentValue -= STEP;\n          }\n          this.drawCircle(this.currentValue);\n        } else {\n          this.clearInterval();\n        }\n      }, 1000 / speed);\n    },\n\n    clearInterval() {\n      if (this.interval) {\n        clearInterval(this.interval);\n        this.interval = null;\n      }\n    }\n  },\n\n  created() {\n    const { value } = this.data;\n    this.currentValue = value;\n    this.drawCircle(value);\n  },\n\n  destroyed() {\n    this.ctx = null;\n    this.clearInterval();\n  }\n});\n","wxml":"<view class=\"van-circle\">\n  <canvas class=\"van-circle__canvas\" style=\"{{ style }}\" canvas-id=\"van-circle\"></canvas>\n  <view wx:if=\"{{ !text }}\" class=\"van-circle__text\">\n    <slot></slot>\n  </view>\n  <cover-view wx:else class=\"van-circle__text\">{{ text }}</cover-view>\n</view>"},"checkbox":{"ts":"import { VantComponent } from '../common/component';\nimport { addUnit } from '../common/utils';\n\nfunction emit(target: WechatMiniprogram.Component.TrivialInstance, value: boolean | any[]) {\n  target.$emit('input', value);\n  target.$emit('change', value);\n}\n\nVantComponent({\n  field: true,\n\n  relation: {\n    name: 'checkbox-group',\n    type: 'ancestor',\n    linked(target) {\n      this.parent = target;\n    },\n    unlinked() {\n      this.parent = null;\n    }\n  },\n\n  classes: ['icon-class', 'label-class'],\n\n  props: {\n    value: Boolean,\n    disabled: Boolean,\n    useIconSlot: Boolean,\n    checkedColor: String,\n    labelPosition: String,\n    labelDisabled: Boolean,\n    shape: {\n      type: String,\n      value: 'round'\n    },\n    iconSize: {\n      type: null,\n      observer: 'setSizeWithUnit'\n    }\n  },\n\n  data: {\n    sizeWithUnit: '20px'\n  },\n\n  methods: {\n    emitChange(value: boolean) {\n      if (this.parent) {\n        this.setParentValue(this.parent, value);\n      } else {\n        emit(this, value);\n      }\n    },\n\n    toggle() {\n      const { disabled, value } = this.data;\n      if (!disabled) {\n        this.emitChange(!value);\n      }\n    },\n\n    onClickLabel() {\n      const { labelDisabled, disabled, value } = this.data;\n      if (!disabled && !labelDisabled) {\n        this.emitChange(!value);\n      }\n    },\n\n    setParentValue(parent: WechatMiniprogram.Component.TrivialInstance, value: boolean) {\n      const parentValue = parent.data.value.slice();\n      const { name } = this.data;\n      const { max } = parent.data;\n\n      if (value) {\n        if (max && parentValue.length >= max) {\n          return;\n        }\n\n        if (parentValue.indexOf(name) === -1) {\n          parentValue.push(name);\n          emit(parent, parentValue);\n        }\n      } else {\n        const index = parentValue.indexOf(name);\n        if (index !== -1) {\n          parentValue.splice(index, 1);\n          emit(parent, parentValue);\n        }\n      }\n    },\n\n    setSizeWithUnit(size: string | number): void {\n      this.set({\n        sizeWithUnit: addUnit(size)\n      });\n    },\n  }\n});\n","wxml":"<wxs src=\"../wxs/utils.wxs\" module=\"utils\" />\n\n<view class=\"van-checkbox custom-class\">\n  <view class=\"van-checkbox__icon-wrap\" bindtap=\"toggle\">\n    <slot wx:if=\"{{ useIconSlot }}\" name=\"icon\" />\n    <van-icon\n      wx:else\n      name=\"success\"\n      size=\"0.8em\"\n      class=\"{{ utils.bem('checkbox__icon', [shape, { disabled, checked: value }]) }}\"\n      style=\"font-size: {{ sizeWithUnit }};{{ checkedColor && value && !disabled ? 'border-color:' + checkedColor + '; background-color:' + checkedColor : '' }}\"\n      custom-class=\"icon-class\"\n      custom-style=\"line-height: 1.25em;\"\n    />\n  </view>\n  <view class=\"label-class {{ utils.bem('checkbox__label', [labelPosition, { disabled }]) }}\" bindtap=\"onClickLabel\">\n    <slot />\n  </view>\n</view>\n"},"col":{"ts":"import { VantComponent } from '../common/component';\n\nVantComponent({\n  relation: {\n    name: 'row',\n    type: 'ancestor'\n  },\n\n  props: {\n    span: Number,\n    offset: Number\n  },\n\n  data: {\n    style: ''\n  },\n\n  methods: {\n    setGutter(gutter: number) {\n      const padding = `${gutter / 2}px`;\n      const style = gutter ? `padding-left: ${padding}; padding-right: ${padding};` : '';\n\n      if (style !== this.data.style) {\n        this.setData({ style });\n      }\n    }\n  }\n});\n","wxml":"<wxs src=\"../wxs/utils.wxs\" module=\"utils\" />\n\n<view\n  class=\"custom-class {{ utils.bem('col', [span]) }} {{ offset ? 'van-col--offset-' + offset : '' }}\"\n  style=\"{{ style }}\"\n>\n  <slot />\n</view>\n"},"collapse":{"ts":"import { VantComponent } from '../common/component';\n\nVantComponent({\n  relation: {\n    name: 'collapse-item',\n    type: 'descendant',\n    linked(child) {\n      this.children.push(child);\n    },\n    unlinked(child) {\n      this.children = this.children.filter(\n        (item: WechatMiniprogram.Component.TrivialInstance) => item !== child\n      );\n    }\n  },\n\n  props: {\n    value: {\n      type: null,\n      observer: 'updateExpanded'\n    },\n    accordion: {\n      type: Boolean,\n      observer: 'updateExpanded'\n    },\n    border: {\n      type: Boolean,\n      value: true\n    }\n  },\n\n  beforeCreate() {\n    this.children = [];\n  },\n\n  methods: {\n    updateExpanded() {\n      this.children.forEach((child: WechatMiniprogram.Component.TrivialInstance) => {\n        child.updateExpanded();\n      });\n    },\n\n    switch(name: string | number, expanded: boolean) {\n      const { accordion, value } = this.data;\n      if (!accordion) {\n        name = expanded\n          ? (value || []).concat(name)\n          : (value || []).filter(\n            (activeName: string | number) => activeName !== name\n          );\n      } else {\n        name = expanded ? name : '';\n      }\n      this.$emit('change', name);\n      this.$emit('input', name);\n    }\n  }\n});\n","wxml":"<view class=\"custom-class van-collapse {{ border ? 'van-hairline--top-bottom' : '' }}\">\n  <slot />\n</view>\n"},"collapse-item":{"ts":"import { VantComponent } from '../common/component';\n\nconst nextTick = () => new Promise(resolve => setTimeout(resolve, 20));\n\nVantComponent({\n  classes: ['title-class', 'content-class'],\n\n  relation: {\n    name: 'collapse',\n    type: 'ancestor',\n    linked(parent) {\n      this.parent = parent;\n    }\n  },\n\n  props: {\n    name: null,\n    title: null,\n    value: null,\n    icon: String,\n    label: String,\n    disabled: Boolean,\n    clickable: Boolean,\n    border: {\n      type: Boolean,\n      value: true\n    },\n    isLink: {\n      type: Boolean,\n      value: true\n    }\n  },\n\n  data: {\n    contentHeight: 0,\n    expanded: false,\n    transition: false\n  },\n\n  mounted() {\n    this.updateExpanded()\n      .then(nextTick)\n      .then(() => {\n        const data: Record<string, boolean | string> = { transition: true };\n\n        if (this.data.expanded) {\n          data.contentHeight = 'auto';\n        }\n\n        this.setData(data);\n      });\n  },\n\n  methods: {\n    updateExpanded() {\n      if (!this.parent) {\n        return Promise.resolve();\n      }\n\n      const { value, accordion } = this.parent.data;\n      const { children = [] } = this.parent;\n      const { name } = this.data;\n\n      const index = children.indexOf(this);\n      const currentName = name == null ? index : name;\n\n      const expanded = accordion\n        ? value === currentName\n        : (value || []).some((name: string | number) => name === currentName);\n\n      const stack = [];\n\n      if (expanded !== this.data.expanded) {\n        stack.push(this.updateStyle(expanded));\n      }\n\n      stack.push(this.set({ index, expanded }));\n\n      return Promise.all(stack);\n    },\n\n    updateStyle(expanded: boolean) {\n      return this.getRect('.van-collapse-item__content')\n        .then((rect: WechatMiniprogram.BoundingClientRectCallbackResult) => rect.height)\n        .then((height: number) => {\n          if (expanded) {\n            return this.set({\n              contentHeight: height ? `${height}px` : 'auto'\n            });\n          }\n\n          return this.set({ contentHeight: `${height}px` })\n            .then(nextTick)\n            .then(() => this.set({ contentHeight: 0 }));\n        });\n    },\n\n    onClick() {\n      if (this.data.disabled) {\n        return;\n      }\n\n      const { name, expanded } = this.data;\n      const index = this.parent.children.indexOf(this);\n      const currentName = name == null ? index : name;\n\n      this.parent.switch(currentName, !expanded);\n    },\n\n    onTransitionEnd() {\n      if (this.data.expanded) {\n        this.setData({\n          contentHeight: 'auto'\n        });\n      }\n    }\n  }\n});\n","wxml":"<wxs src=\"../wxs/utils.wxs\" module=\"utils\" />\n\n<view class=\"van-collapse-item custom-class {{ index !== 0 ? 'van-hairline--top' : '' }}\">\n  <van-cell\n    title=\"{{ title }}\"\n    title-class=\"title-class\"\n    icon=\"{{ icon }}\"\n    value=\"{{ value }}\"\n    label=\"{{ label }}\"\n    is-link=\"{{ isLink }}\"\n    clickable=\"{{ clickable }}\"\n    border=\"{{ border && expanded }}\"\n    class=\"{{ utils.bem('collapse-item__title', { disabled, expanded }) }}\"\n    right-icon-class=\"van-cell__right-icon\"\n    custom-class=\"van-cell\"\n    hover-class=\"van-cell--hover\"\n    bind:click=\"onClick\"\n  >\n    <slot\n      name=\"title\"\n      slot=\"title\"\n    />\n    <slot\n      name=\"icon\"\n      slot=\"icon\"\n    />\n    <slot name=\"value\" />\n    <slot\n      name=\"right-icon\"\n      slot=\"right-icon\"\n    />\n  </van-cell>\n  <view\n    class=\"{{ utils.bem('collapse-item__wrapper', { transition }) }}\"\n    style=\"height: {{ contentHeight }};\"\n    bind:transitionend=\"onTransitionEnd\"\n  >\n    <view\n      class=\"van-collapse-item__content content-class\"\n    >\n      <slot />\n    </view>\n  </view>\n</view>\n"},"datetime-picker":{"ts":"import { VantComponent } from '../common/component';\nimport { isDef } from '../common/utils';\nimport { pickerProps } from '../picker/shared';\n\nconst currentYear = new Date().getFullYear();\n\nfunction isValidDate(date: number) {\n  return isDef(date) && !isNaN(new Date(date).getTime());\n}\n\nfunction range(num: number, min: number, max: number) {\n  return Math.min(Math.max(num, min), max);\n}\n\nfunction padZero(val: string | number): string {\n  return `00${val}`.slice(-2);\n}\n\nfunction times(n: number, iteratee: (index: number) => string): string[] {\n  let index = -1;\n  const result = Array(n < 0 ? 0 : n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\nfunction getTrueValue(formattedValue: string): number {\n  if (!formattedValue) return;\n  while (isNaN(parseInt(formattedValue, 10))) {\n    formattedValue = formattedValue.slice(1);\n  }\n  return parseInt(formattedValue, 10);\n}\n\nfunction getMonthEndDay(year: number, month: number): number {\n  return 32 - new Date(year, month - 1, 32).getDate();\n}\n\nconst defaultFormatter = (_, value) => value;\n\nVantComponent({\n  classes: ['active-class', 'toolbar-class', 'column-class'],\n\n  props: {\n    ...pickerProps,\n    value: null,\n    filter: null,\n    type: {\n      type: String,\n      value: 'datetime'\n    },\n    showToolbar: {\n      type: Boolean,\n      value: true\n    },\n    formatter: {\n      type: null,\n      value: defaultFormatter\n    },\n    minDate: {\n      type: Number,\n      value: new Date(currentYear - 10, 0, 1).getTime()\n    },\n    maxDate: {\n      type: Number,\n      value: new Date(currentYear + 10, 11, 31).getTime()\n    },\n    minHour: {\n      type: Number,\n      value: 0\n    },\n    maxHour: {\n      type: Number,\n      value: 23\n    },\n    minMinute: {\n      type: Number,\n      value: 0\n    },\n    maxMinute: {\n      type: Number,\n      value: 59\n    }\n  },\n\n  data: {\n    innerValue: Date.now(),\n    columns: []\n  },\n\n  watch: {\n    value: 'updateValue',\n    type: 'updateValue',\n    minDate: 'updateValue',\n    maxDate: 'updateValue',\n    minHour: 'updateValue',\n    maxHour: 'updateValue',\n    minMinute: 'updateValue',\n    maxMinute: 'updateValue'\n  },\n\n  methods: {\n    updateValue() {\n      const { data } = this;\n      const val = this.correctValue(this.data.value);\n      const isEqual = val === data.innerValue;\n      if (!isEqual) {\n        this.updateColumnValue(val).then(() => {\n          this.$emit('input', val);\n        });\n      } else {\n        this.updateColumns();\n      }\n    },\n\n    getPicker() {\n      if (this.picker == null) {\n        this.picker = this.selectComponent('.van-datetime-picker');\n\n        const { picker } = this;\n        const { setColumnValues } = picker;\n        picker.setColumnValues = (...args: any) =>\n          setColumnValues.apply(picker, [...args, false]);\n      }\n\n      return this.picker;\n    },\n\n    updateColumns() {\n      const { formatter = defaultFormatter } = this.data;\n      const results = this.getOriginColumns().map(column => ({\n        values: column.values.map(value => formatter(column.type, value))\n      }));\n\n      return this.set({ columns: results });\n    },\n\n    getOriginColumns() {\n      const { filter } = this.data;\n      const results = this.getRanges().map(({ type, range }) => {\n        let values = times(range[1] - range[0] + 1, index => {\n          let value = range[0] + index;\n          value = type === 'year' ? `${value}` : padZero(value);\n          return value;\n        });\n\n        if (filter) {\n          values = filter(type, values);\n        }\n\n        return { type, values };\n      });\n\n      return results;\n    },\n\n    getRanges() {\n      const { data } = this;\n      if (data.type === 'time') {\n        return [\n          {\n            type: 'hour',\n            range: [data.minHour, data.maxHour]\n          },\n          {\n            type: 'minute',\n            range: [data.minMinute, data.maxMinute]\n          }\n        ];\n      }\n\n      const {\n        maxYear,\n        maxDate,\n        maxMonth,\n        maxHour,\n        maxMinute\n      } = this.getBoundary('max', data.innerValue);\n      const {\n        minYear,\n        minDate,\n        minMonth,\n        minHour,\n        minMinute\n      } = this.getBoundary('min', data.innerValue);\n\n      const result = [\n        {\n          type: 'year',\n          range: [minYear, maxYear]\n        },\n        {\n          type: 'month',\n          range: [minMonth, maxMonth]\n        },\n        {\n          type: 'day',\n          range: [minDate, maxDate]\n        },\n        {\n          type: 'hour',\n          range: [minHour, maxHour]\n        },\n        {\n          type: 'minute',\n          range: [minMinute, maxMinute]\n        }\n      ];\n\n      if (data.type === 'date') result.splice(3, 2);\n      if (data.type === 'year-month') result.splice(2, 3);\n      return result;\n    },\n\n    correctValue(value: any) {\n      const { data } = this;\n      // validate value\n      const isDateType = data.type !== 'time';\n      if (isDateType && !isValidDate(value)) {\n        value = data.minDate;\n      } else if (!isDateType && !value) {\n        const { minHour } = data;\n        value = `${padZero(minHour)}:00`;\n      }\n\n      // time type\n      if (!isDateType) {\n        let [hour, minute] = value.split(':');\n        hour = padZero(range(hour, data.minHour, data.maxHour));\n        minute = padZero(range(minute, data.minMinute, data.maxMinute));\n\n        return `${hour}:${minute}`;\n      }\n\n      // date type\n      value = Math.max(value, data.minDate);\n      value = Math.min(value, data.maxDate);\n\n      return value;\n    },\n\n    getBoundary(type: string, innerValue: number) {\n      const value = new Date(innerValue);\n      const boundary = new Date(this.data[`${type}Date`]);\n      const year = boundary.getFullYear();\n      let month = 1;\n      let date = 1;\n      let hour = 0;\n      let minute = 0;\n\n      if (type === 'max') {\n        month = 12;\n        date = getMonthEndDay(value.getFullYear(), value.getMonth() + 1);\n        hour = 23;\n        minute = 59;\n      }\n\n      if (value.getFullYear() === year) {\n        month = boundary.getMonth() + 1;\n        if (value.getMonth() + 1 === month) {\n          date = boundary.getDate();\n          if (value.getDate() === date) {\n            hour = boundary.getHours();\n            if (value.getHours() === hour) {\n              minute = boundary.getMinutes();\n            }\n          }\n        }\n      }\n\n      return {\n        [`${type}Year`]: year,\n        [`${type}Month`]: month,\n        [`${type}Date`]: date,\n        [`${type}Hour`]: hour,\n        [`${type}Minute`]: minute\n      };\n    },\n\n    onCancel() {\n      this.$emit('cancel');\n    },\n\n    onConfirm() {\n      this.$emit('confirm', this.data.innerValue);\n    },\n\n    onChange() {\n      const { data } = this;\n      let value;\n\n      const picker = this.getPicker();\n\n      if (data.type === 'time') {\n        const indexes = picker.getIndexes();\n        value = `${+data.columns[0].values[indexes[0]]}:${+data.columns[1].values[indexes[1]]}`;\n      } else {\n        const values = picker.getValues();\n        const year = getTrueValue(values[0]);\n        const month = getTrueValue(values[1]);\n        const maxDate = getMonthEndDay(year, month);\n        let date = getTrueValue(values[2]);\n        if (data.type === 'year-month') {\n          date = 1;\n        }\n        date = date > maxDate ? maxDate : date;\n        let hour = 0;\n        let minute = 0;\n        if (data.type === 'datetime') {\n          hour = getTrueValue(values[3]);\n          minute = getTrueValue(values[4]);\n        }\n        value = new Date(year, month - 1, date, hour, minute);\n      }\n      value = this.correctValue(value);\n\n      this.updateColumnValue(value).then(() => {\n        this.$emit('input', value);\n        this.$emit('change', picker);\n      });\n    },\n\n    updateColumnValue(value) {\n      let values = [];\n      const { type, formatter = defaultFormatter } = this.data;\n      const picker = this.getPicker();\n\n      if (type === 'time') {\n        const pair = value.split(':');\n        values = [\n          formatter('hour', pair[0]),\n          formatter('minute', pair[1])\n        ];\n      } else {\n        const date = new Date(value);\n        values = [\n          formatter('year', `${date.getFullYear()}`),\n          formatter('month', padZero(date.getMonth() + 1))\n        ];\n        if (type === 'date') {\n          values.push(formatter('day', padZero(date.getDate())));\n        }\n        if (type === 'datetime') {\n          values.push(\n            formatter('day', padZero(date.getDate())),\n            formatter('hour', padZero(date.getHours())),\n            formatter('minute', padZero(date.getMinutes()))\n          );\n        }\n      }\n\n      return this.set({ innerValue: value })\n        .then(() => this.updateColumns())\n        .then(() => picker.setValues(values));\n    }\n  },\n\n  created() {\n    const innerValue = this.correctValue(this.data.value);\n    this.updateColumnValue(innerValue).then(() => {\n      this.$emit('input', innerValue);\n    });\n  }\n});\n","wxml":"<van-picker\n  class=\"van-datetime-picker\"\n  active-class=\"active-class\"\n  toolbar-class=\"toolbar-class\"\n  column-class=\"column-class\"\n  title=\"{{ title }}\"\n  columns=\"{{ columns }}\"\n  item-height=\"{{ itemHeight }}\"\n  show-toolbar=\"{{ showToolbar }}\"\n  visible-item-count=\"{{ visibleItemCount }}\"\n  confirm-button-text=\"{{ confirmButtonText }}\"\n  cancel-button-text=\"{{ cancelButtonText }}\"\n  bind:change=\"onChange\"\n  bind:confirm=\"onConfirm\"\n  bind:cancel=\"onCancel\"\n/>\n"},"count-down":{"ts":"function padZero(num: number | string, targetLength = 2): string {\n  let str = num + '';\n\n  while (str.length < targetLength) {\n    str = '0' + str;\n  }\n\n  return str;\n}\n\nexport type TimeData = {\n  days: number;\n  hours: number;\n  minutes: number;\n  seconds: number;\n  milliseconds: number;\n};\n\nconst SECOND = 1000;\nconst MINUTE = 60 * SECOND;\nconst HOUR = 60 * MINUTE;\nconst DAY = 24 * HOUR;\n\nexport function parseTimeData(time: number): TimeData {\n  const days = Math.floor(time / DAY);\n  const hours = Math.floor((time % DAY) / HOUR);\n  const minutes = Math.floor((time % HOUR) / MINUTE);\n  const seconds = Math.floor((time % MINUTE) / SECOND);\n  const milliseconds = Math.floor(time % SECOND);\n\n  return {\n    days,\n    hours,\n    minutes,\n    seconds,\n    milliseconds\n  };\n}\n\nexport function parseFormat(format: string, timeData: TimeData): string {\n  const { days } = timeData;\n  let { hours, minutes, seconds, milliseconds } = timeData;\n\n  if (format.indexOf('DD') === -1) {\n    hours += days * 24;\n  } else {\n    format = format.replace('DD', padZero(days));\n  }\n\n  if (format.indexOf('HH') === -1) {\n    minutes += hours * 60;\n  } else {\n    format = format.replace('HH', padZero(hours));\n  }\n\n  if (format.indexOf('mm') === -1) {\n    seconds += minutes * 60;\n  } else {\n    format = format.replace('mm', padZero(minutes));\n  }\n\n  if (format.indexOf('ss') === -1) {\n    milliseconds += seconds * 1000;\n  } else {\n    format = format.replace('ss', padZero(seconds));\n  }\n\n  return format.replace('SSS', padZero(milliseconds, 3));\n}\n\nexport function isSameSecond(time1: number, time2: number): boolean {\n  return Math.floor(time1 / 1000) === Math.floor(time2 / 1000);\n}\n","wxml":"<view class=\"van-count-down\">\n  <slot wx:if=\"{{ useSlot }}\"/>\n  <block wx:else>{{ formattedTime }}</block>\n</view>\n"},"dialog":{"ts":"import { VantComponent } from '../common/component';\nimport { button } from '../mixins/button';\nimport { openType } from '../mixins/open-type';\nimport { addUnit } from '../common/utils';\nimport { GRAY, BLUE } from '../common/color';\n\ntype Action = 'confirm' | 'cancel' | 'overlay';\n\nVantComponent({\n  mixins: [button, openType],\n\n  props: {\n    show: Boolean,\n    title: String,\n    message: String,\n    useSlot: Boolean,\n    className: String,\n    customStyle: String,\n    asyncClose: Boolean,\n    messageAlign: String,\n    overlayStyle: String,\n    useTitleSlot: Boolean,\n    showCancelButton: Boolean,\n    closeOnClickOverlay: Boolean,\n    confirmButtonOpenType: String,\n    width: {\n      type: null,\n      observer: 'setWidthWithUnit'\n    },\n    zIndex: {\n      type: Number,\n      value: 2000\n    },\n    confirmButtonText: {\n      type: String,\n      value: '确认'\n    },\n    cancelButtonText: {\n      type: String,\n      value: '取消'\n    },\n    confirmButtonColor: {\n      type: String,\n      value: BLUE\n    },\n    cancelButtonColor: {\n      type: String,\n      value: GRAY\n    },\n    showConfirmButton: {\n      type: Boolean,\n      value: true\n    },\n    overlay: {\n      type: Boolean,\n      value: true\n    },\n    transition: {\n      type: String,\n      value: 'scale'\n    }\n  },\n\n  data: {\n    loading: {\n      confirm: false,\n      cancel: false\n    }\n  },\n\n  watch: {\n    show(show: boolean) {\n      !show && this.stopLoading();\n    }\n  },\n\n  methods: {\n    onConfirm() {\n      this.handleAction('confirm');\n    },\n\n    onCancel() {\n      this.handleAction('cancel');\n    },\n\n    onClickOverlay() {\n      this.onClose('overlay');\n    },\n\n    handleAction(action: Action) {\n      if (this.data.asyncClose) {\n        this.setData({\n          [`loading.${action}`]: true\n        });\n      }\n\n      this.onClose(action);\n    },\n\n    close() {\n      this.setData({\n        show: false\n      });\n    },\n\n    stopLoading() {\n      this.setData({\n        loading: {\n          confirm: false,\n          cancel: false\n        }\n      });\n    },\n\n    onClose(action: Action) {\n      if (!this.data.asyncClose) {\n        this.close();\n      }\n      this.$emit('close', action);\n\n      // 把 dialog 实例传递出去，可以通过 stopLoading() 在外部关闭按钮的 loading\n      this.$emit(action, { dialog: this });\n\n      const callback = this.data[action === 'confirm' ? 'onConfirm' : 'onCancel'];\n      if (callback) {\n        callback(this);\n      }\n    },\n\n    setWidthWithUnit(val) {\n      this.setData({\n        widthWithUnit: addUnit(val)\n      });\n    }\n  }\n});\n","wxml":"<van-popup\n  show=\"{{ show }}\"\n  z-index=\"{{ zIndex }}\"\n  overlay=\"{{ overlay }}\"\n  transition=\"{{ transition }}\"\n  custom-class=\"van-dialog {{ className }}\"\n  custom-style=\"{{ widthWithUnit ? 'width: ' + widthWithUnit + ';' : '' }}{{ customStyle }}\"\n  overlay-style=\"{{ overlayStyle }}\"\n  close-on-click-overlay=\"{{ closeOnClickOverlay }}\"\n  bind:close=\"onClickOverlay\"\n>\n  <view\n    wx:if=\"{{ title || useTitleSlot  }}\"\n    class=\"van-dialog__header {{ message || useSlot ? '' : 'van-dialog--isolated' }}\"\n  >\n    <slot wx:if=\"{{ useTitleSlot }}\" name=\"title\" />\n    <block wx:elif=\"{{ title }}\"> {{ title }}</block>\n  </view>\n\n  <slot wx:if=\"{{ useSlot }}\" />\n  <view\n    wx:elif=\"{{ message }}\"\n    class=\"van-dialog__message {{ title ? 'van-dialog__message--has-title' : '' }} {{ messageAlign ? 'van-dialog__message--' + messageAlign : '' }}\"\n  >\n    <text class=\"van-dialog__message-text\">{{ message }}</text>\n  </view>\n\n  <view class=\"van-hairline--top van-dialog__footer\">\n    <van-button\n      wx:if=\"{{ showCancelButton }}\"\n      size=\"large\"\n      loading=\"{{ loading.cancel }}\"\n      class=\"van-dialog__button van-hairline--right\"\n      custom-class=\"van-dialog__cancel\"\n      custom-style=\"color: {{ cancelButtonColor }}\"\n      bind:click=\"onCancel\"\n    >\n      {{ cancelButtonText }}\n    </van-button>\n    <van-button\n      wx:if=\"{{ showConfirmButton }}\"\n      size=\"large\"\n      class=\"van-dialog__button\"\n      loading=\"{{ loading.confirm }}\"\n      custom-class=\"van-dialog__confirm\"\n      custom-style=\"color: {{ confirmButtonColor }}\"\n\n      open-type=\"{{ confirmButtonOpenType }}\"\n      lang=\"{{ lang }}\"\n      business-id=\"{{ businessId }}\"\n      session-from=\"{{ sessionFrom }}\"\n      send-message-title=\"{{ sendMessageTitle }}\"\n      send-message-path=\"{{ sendMessagePath }}\"\n      send-message-img=\"{{ sendMessageImg }}\"\n      show-message-card=\"{{ showMessageCard }}\"\n      app-parameter=\"{{ appParameter }}\"\n\n      bind:click=\"onConfirm\"\n      bindgetuserinfo=\"bindGetUserInfo\"\n      bindcontact=\"bindContact\"\n      bindgetphonenumber=\"bindGetPhoneNumber\"\n      binderror=\"bindError\"\n      bindlaunchapp=\"bindLaunchApp\"\n      bindopensetting=\"bindOpenSetting\"\n    >\n      {{ confirmButtonText }}\n    </van-button>\n  </view>\n</van-popup>\n"},"divider":{"ts":"import { VantComponent } from '../common/component';\n\nVantComponent({\n  props: {\n    dashed: {\n      type: Boolean,\n      value: false\n    },\n    hairline: {\n      type: Boolean,\n      value: false\n    },\n    contentPosition: {\n      type: String,\n      value: ''\n    },\n    fontSize: {\n      type: Number,\n      value: ''\n    },\n    borderColor: {\n      type: String,\n      value: ''\n    },\n    textColor: {\n      type: String,\n      value: ''\n    },\n    customStyle: {\n      type: String,\n      value: ''\n    }\n  }\n});\n","wxml":"<wxs src=\"../wxs/utils.wxs\" module=\"utils\" />\n\n<view\n  class=\"custom-class {{ utils.bem('divider', [{dashed, hairline}, contentPosition]) }}\"\n  style=\"{{ borderColor  ? 'border-color: ' + borderColor + ';' : '' }}{{ textColor ? 'color: ' + textColor + ';' : '' }} {{ fontSize ? 'font-size: ' + fontSize + 'px;' : '' }} {{ customStyle }}\"\n>\n  <slot />\n</view>\n"},"dropdown-item":{"ts":"import { VantComponent } from '../common/component';\nimport { Weapp } from 'definitions/weapp';\n\nVantComponent({\n  field: true,\n\n  relation: {\n    name: 'dropdown-menu',\n    type: 'ancestor',\n    linked(target) {\n      this.parent = target;\n    },\n    unlinked() {\n      this.parent = null;\n    }\n  },\n\n  props: {\n    value: null,\n    title: String,\n    disabled: Boolean,\n    titleClass: String,\n    options: {\n      type: Array,\n      value: []\n    }\n  },\n\n  data: {\n    transition: true,\n    showPopup: false,\n    showWrapper: false,\n    displayTitle: ''\n  },\n\n  created() {\n    this.setData({ displayTitle: this.computedDisplayTitle(this.data.value) });\n  },\n\n  methods: {\n    computedDisplayTitle(curValue) {\n      const { title, options } = this.data;\n\n      if (title) {\n        return title;\n      }\n\n      const match = options.filter(option => option.value === curValue);\n      const displayTitle = match.length ? match[0].text : '';\n      return displayTitle;\n    },\n\n    onClickOverlay() {\n      this.toggle();\n      this.$emit('close');\n    },\n\n    onOptionTap(event: Weapp.Event) {\n      let { value, displayTitle } = this.data;\n      const { option } = event.currentTarget.dataset;\n      const { value: optionValue } = option;\n\n      if (optionValue !== value) {\n        value = optionValue;\n        displayTitle = this.computedDisplayTitle(optionValue);\n        this.$emit('change', optionValue);\n      }\n      this.setData({ showPopup: false, value, displayTitle });\n\n      const time = this.data.duration || 0;\n      setTimeout(() => {\n        this.setData({ showWrapper: false });\n      }, time);\n\n      // parent 中的 itemListData 是 children 上的数据的集合\n      // 数据的更新由 children 各自维护，但是模板的更新需要额外触发 parent 的 setData\n      this.parent.setData({ itemListData: this.parent.data.itemListData });\n    },\n\n    toggle() {\n      const { childIndex } = this.data;\n      this.parent.toggleItem(childIndex);\n    }\n  }\n});\n","wxml":"<wxs src=\"../wxs/utils.wxs\" module=\"utils\" />\n\n<view\n  wx:if=\"{{ showWrapper }}\"\n  class=\"{{ utils.bem('dropdown-item', direction) }}\"\n  style=\"{{ wrapperStyle }}\"\n>\n  <van-popup\n    show=\"{{ showPopup }}\"\n    custom-style=\"position: absolute;\"\n    overlay-style=\"position: absolute;\"\n    overlay=\"{{ overlay }}\"\n    position=\"{{ direction === 'down' ? 'top' : 'bottom' }}\"\n    duration=\"{{ transition ? duration : 0 }}\"\n    close-on-click-overlay=\"{{ closeOnClickOverlay }}\"\n    bind:close=\"onClickOverlay\"\n  >\n    <van-cell\n      wx:for=\"{{ options }}\"\n      wx:key=\"{{ item.value }}\"\n      data-option=\"{{ item }}\"\n      class=\"{{ utils.bem('dropdown-item__option', { active: item.value === value } ) }}\"\n      clickable\n      icon=\"{{ item.icon }}\"\n      bind:tap=\"onOptionTap\"\n    >\n      <view\n        slot=\"title\"\n        class=\"van-dropdown-item__title\"\n        style=\"{{ item.value === value  ? 'color:' + activeColor : '' }}\"\n      >\n        {{ item.text }}\n      </view>\n      <van-icon\n        wx:if=\"{{ item.value === value }}\"\n        name=\"success\"\n        class=\"van-dropdown-item__icon\"\n        color=\"{{ activeColor }}\"\n      />\n    </van-cell>\n\n    <slot />\n  </van-popup>\n</view>\n"},"field":{"ts":"import { VantComponent } from '../common/component';\nimport { Weapp } from 'definitions/weapp';\nimport { getSystemInfoSync } from '../common/utils';\n\nVantComponent({\n  field: true,\n\n  classes: ['input-class', 'right-icon-class'],\n\n  props: {\n    size: String,\n    icon: String,\n    label: String,\n    error: Boolean,\n    fixed: Boolean,\n    focus: Boolean,\n    center: Boolean,\n    isLink: Boolean,\n    leftIcon: String,\n    rightIcon: String,\n    disabled: Boolean,\n    autosize: Boolean,\n    readonly: Boolean,\n    required: Boolean,\n    password: Boolean,\n    iconClass: String,\n    clearable: Boolean,\n    clickable: Boolean,\n    inputAlign: String,\n    placeholder: String,\n    customStyle: String,\n    confirmType: String,\n    confirmHold: Boolean,\n    errorMessage: String,\n    arrowDirection: String,\n    placeholderStyle: String,\n    errorMessageAlign: String,\n    selectionEnd: {\n      type: Number,\n      value: -1\n    },\n    selectionStart: {\n      type: Number,\n      value: -1\n    },\n    showConfirmBar: {\n      type: Boolean,\n      value: true\n    },\n    adjustPosition: {\n      type: Boolean,\n      value: true\n    },\n    cursorSpacing: {\n      type: Number,\n      value: 50\n    },\n    maxlength: {\n      type: Number,\n      value: -1\n    },\n    type: {\n      type: String,\n      value: 'text'\n    },\n    border: {\n      type: Boolean,\n      value: true\n    },\n    titleWidth: {\n      type: String,\n      value: '90px'\n    }\n  },\n\n  data: {\n    focused: false,\n    system: getSystemInfoSync().system.split(' ').shift().toLowerCase()\n  },\n\n  methods: {\n    onInput(event: Weapp.Event) {\n      const { value = '' } = event.detail || {};\n\n      this.setData({ value }, () => {\n        this.emitChange(value);\n      });\n    },\n\n    onFocus(event: Weapp.Event) {\n      this.setData({ focused: true });\n      this.$emit('focus', event.detail);\n    },\n\n    onBlur(event: Weapp.Event) {\n      this.setData({ focused: false });\n      this.$emit('blur', event.detail);\n    },\n\n    onClickIcon() {\n      this.$emit('click-icon');\n    },\n\n    onClear() {\n      this.setData({ value: '' }, () => {\n        this.emitChange('');\n        this.$emit('clear', '');\n      });\n    },\n\n    onConfirm() {\n      this.$emit('confirm', this.data.value);\n    },\n\n    emitChange(value) {\n      this.$emit('input', value);\n      this.$emit('change', value);\n    }\n  }\n});\n","wxml":"<wxs src=\"../wxs/utils.wxs\" module=\"utils\" />\n\n<van-cell\n  size=\"{{ size }}\"\n  icon=\"{{ leftIcon }}\"\n  title=\"{{ label }}\"\n  center=\"{{ center }}\"\n  border=\"{{ border }}\"\n  is-link=\"{{ isLink }}\"\n  required=\"{{ required }}\"\n  clickable=\"{{ clickable }}\"\n  title-width=\"{{ titleWidth }}\"\n  custom-style=\"{{ customStyle }}\"\n  arrow-direction=\"{{ arrowDirection }}\"\n  custom-class=\"van-field\"\n>\n  <slot name=\"left-icon\" slot=\"icon\" />\n  <slot name=\"label\" slot=\"title\" />\n  <view class=\"{{ utils.bem('field__body', [type, system]) }}\">\n    <textarea\n      wx:if=\"{{ type === 'textarea' }}\"\n      class=\"input-class {{ utils.bem('field__input', [inputAlign, type, { disabled, error }]) }}\"\n      fixed=\"{{ fixed }}\"\n      focus=\"{{ focus }}\"\n      value=\"{{ value }}\"\n      disabled=\"{{ disabled || readonly }}\"\n      maxlength=\"{{ maxlength }}\"\n      placeholder=\"{{ placeholder }}\"\n      placeholder-style=\"{{ placeholderStyle }}\"\n      placeholder-class=\"{{ utils.bem('field__placeholder', { error }) }}\"\n      auto-height=\"{{ autosize }}\"\n      cursor-spacing=\"{{ cursorSpacing }}\"\n      adjust-position=\"{{ adjustPosition }}\"\n      show-confirm-bar=\"{{ showConfirmBar }}\"\n      selection-end=\"{{ selectionEnd }}\"\n      selection-start=\"{{ selectionStart }}\"\n      bindinput=\"onInput\"\n      bind:blur=\"onBlur\"\n      bind:focus=\"onFocus\"\n      bind:confirm=\"onConfirm\"\n    >\n    </textarea>\n    <input\n      wx:else\n      class=\"input-class {{ utils.bem('field__input', [inputAlign, { disabled, error }]) }}\"\n      type=\"{{ type }}\"\n      focus=\"{{ focus }}\"\n      value=\"{{ value }}\"\n      disabled=\"{{ disabled || readonly }}\"\n      maxlength=\"{{ maxlength }}\"\n      placeholder=\"{{ placeholder }}\"\n      placeholder-style=\"{{ placeholderStyle }}\"\n      placeholder-class=\"{{ utils.bem('field__placeholder', { error }) }}\"\n      confirm-type=\"{{ confirmType }}\"\n      confirm-hold=\"{{ confirmHold }}\"\n      cursor-spacing=\"{{ cursorSpacing }}\"\n      adjust-position=\"{{ adjustPosition }}\"\n      selection-end=\"{{ selectionEnd }}\"\n      selection-start=\"{{ selectionStart }}\"\n      password=\"{{ password || type === 'password' }}\"\n      bindinput=\"onInput\"\n      bind:blur=\"onBlur\"\n      bind:focus=\"onFocus\"\n      bind:confirm=\"onConfirm\"\n    />\n    <van-icon\n      wx:if=\"{{ clearable && focused && value && !readonly }}\"\n      size=\"16px\"\n      name=\"clear\"\n      class=\"van-field__clear-root van-field__icon-root\"\n      bindtouchstart=\"onClear\"\n    />\n    <view class=\"van-field__icon-container\" bind:tap=\"onClickIcon\">\n      <van-icon\n        wx:if=\"{{ rightIcon || icon }}\"\n        size=\"16px\"\n        name=\"{{ rightIcon || icon }}\"\n        class=\"van-field__icon-root {{ iconClass }}\"\n        custom-class=\"right-icon-class\"\n      />\n      <slot name=\"right-icon\" />\n      <slot name=\"icon\" />\n    </view>\n    <view class=\"van-field__button\">\n      <slot name=\"button\" />\n    </view>\n  </view>\n  <view wx:if=\"{{ errorMessage }}\" class=\"van-field__error-message {{ utils.bem('field__error', [errorMessageAlign, { disabled, error }]) }}\">\n    {{ errorMessage }}\n  </view>\n</van-cell>\n"},"dropdown-menu":{"wxml":"<wxs src=\"../wxs/utils.wxs\" module=\"utils\" />\n\n<view class=\"van-dropdown-menu van-dropdown-menu--top-bottom\">\n  <view\n    wx:for=\"{{ itemListData }}\"\n    wx:key=\"index\"\n    data-item=\"{{ item }}\"\n    data-index=\"{{ index }}\"\n    class=\"{{ utils.bem('dropdown-menu__item', { disabled: item.disabled }) }}\"\n    bind:tap=\"onTitleTap\"\n  >\n    <view\n      class=\"{{ item.titleClass }} {{ utils.bem('dropdown-menu__title', { active: item.showPopup, down: item.showPopup === (direction === 'down') }) }}\"\n      style=\"{{ item.showPopup ? 'color:' + activeColor : '' }}\"\n    >\n      <view class=\"van-ellipsis\">\n        {{item.displayTitle}}\n      </view>\n    </view>\n  </view>\n\n  <slot />\n</view>\n","ts":"import { VantComponent } from '../common/component';\nimport { Weapp } from 'definitions/weapp';\nimport { addUnit } from '../common/utils';\n\ninterface ToggleOptions {\n  immediate?: Boolean;\n}\n\nlet ARRAY: WechatMiniprogram.Component.TrivialInstance[] = [];\n\nVantComponent({\n  field: true,\n\n  relation: {\n    name: 'dropdown-item',\n    type: 'descendant',\n    linked(target) {\n      this.children = this.children || [];\n      // 透传 props 给 dropdown-item\n      const { overlay, duration, activeColor, closeOnClickOverlay, direction } = this.data;\n      this.updateChildData(target, {\n        overlay,\n        duration,\n        activeColor,\n        closeOnClickOverlay,\n        direction,\n        childIndex: this.children.length\n      });\n\n      this.children.push(target);\n      // 收集 dorpdown-item 的 data 挂在 data 上\n      target &&\n        this.setData({\n          itemListData: this.data.itemListData.concat([target.data])\n        });\n    },\n    unlinked(target) {\n      this.children = this.children.filter((child: WechatMiniprogram.Component.TrivialInstance) => child !== target);\n    }\n  },\n\n  props: {\n    activeColor: String,\n    overlay: {\n      type: Boolean,\n      value: true\n    },\n    zIndex: {\n      type: Number,\n      value: 10\n    },\n    duration: {\n      type: Number,\n      value: 200\n    },\n    direction: {\n      type: String,\n      value: 'down'\n    },\n    closeOnClickOverlay: {\n      type: Boolean,\n      value: true\n    },\n    closeOnClickOutside: {\n      type: Boolean,\n      value: true\n    }\n  },\n\n  data: {\n    itemListData: []\n  },\n\n  created() {\n    ARRAY.push(this);\n  },\n\n  destroyed() {\n    ARRAY = ARRAY.filter(item => item !== this);\n  },\n\n  methods: {\n    updateChildData(childItem: WechatMiniprogram.Component.TrivialInstance, newData, needRefreshList: Boolean = false) {\n      childItem.setData(newData);\n\n      if (needRefreshList) {\n        // dropdown-item data 更新，涉及到 title 的展示，触发模板更新\n        this.setData({ itemListData: this.data.itemListData });\n      }\n    },\n\n    toggleItem(active: Number) {\n      this.children.forEach((item: WechatMiniprogram.Component.TrivialInstance, index: Number) => {\n        const { showPopup } = item.data;\n        if (index === active) {\n          this.toggleChildItem(item);\n        } else if (showPopup) {\n          this.toggleChildItem(item, false, { immediate: true });\n        }\n      });\n    },\n\n    toggleChildItem(childItem: WechatMiniprogram.Component.TrivialInstance, show: boolean, options: ToggleOptions = {}) {\n      const { showPopup, duration } = childItem.data;\n\n      if (show === undefined) show = !showPopup;\n\n      if (show === showPopup) {\n        return;\n      }\n\n      const newChildData = { transition: !options.immediate, showPopup: show };\n\n      if (!show) {\n        const time = options.immediate ? 0 : duration;\n        this.updateChildData(childItem, { ...newChildData }, true);\n\n        setTimeout(() => {\n          this.updateChildData(childItem, { showWrapper: false }, true);\n        }, time);\n        return;\n      }\n\n      this.getChildWrapperStyle().then((wrapperStyle: String = '') => {\n        this.updateChildData(\n          childItem,\n          {\n            ...newChildData,\n            wrapperStyle,\n            showWrapper: true\n          },\n          true\n        );\n      });\n    },\n\n    close() {\n      this.children.forEach((item: WechatMiniprogram.Component.TrivialInstance) => {\n        this.toggleChildItem(item, false, { immediate: true });\n      });\n    },\n\n    getChildWrapperStyle() {\n      const { windowHeight } = wx.getSystemInfoSync();\n      const { zIndex, direction } = this.data;\n      let offset = 0;\n\n      return this.getRect('.van-dropdown-menu').then(rect => {\n        const { top = 0, bottom = 0 } = rect;\n        if (direction === 'down') {\n          offset = bottom;\n        } else {\n          offset = windowHeight - top;\n        }\n\n        let wrapperStyle = `z-index: ${zIndex};`;\n\n        if (direction === 'down') {\n          wrapperStyle += `top: ${addUnit(offset)};`;\n        } else {\n          wrapperStyle += `bottom: ${addUnit(offset)};`;\n        }\n\n        return Promise.resolve(wrapperStyle);\n      });\n    },\n\n    onTitleTap(event: Weapp.Event) {\n      // item ---> dropdown-item\n      const { item, index } = event.currentTarget.dataset;\n\n      if (!item.disabled) {\n        // menuItem ---> dropdown-menu\n        ARRAY.forEach(menuItem => {\n          if (menuItem && menuItem.data.closeOnClickOutside && menuItem !== this) {\n            menuItem.close();\n          }\n        });\n\n        this.toggleItem(index);\n      }\n    }\n  }\n});\n"},"goods-action":{"ts":"import { VantComponent } from '../common/component';\n\nVantComponent({\n  relation: {\n    type: 'descendant',\n    name: 'goods-action-button',\n    linked(child) {\n      this.children.push(child);\n    },\n    unlinked(child) {\n      this.children = this.children.filter((item) => item !== child);\n    }\n  },\n  beforeCreate() {\n    this.children = [];\n  },\n  props: {\n    safeAreaInsetBottom: {\n      type: Boolean,\n      value: true\n    }\n  }\n});\n","wxml":"<wxs src=\"../wxs/utils.wxs\" module=\"utils\" />\n\n<view class=\"custom-class {{ utils.bem('goods-action', { safe: safeAreaInsetBottom }) }}\">\n  <slot />\n</view>\n"},"goods-action-button":{"wxml":"<wxs src=\"../wxs/utils.wxs\" module=\"utils\" />\n<van-button\n  square\n  id=\"{{ id }}\"\n  lang=\"{{ lang }}\"\n  type=\"{{ type }}\"\n  color=\"{{ color }}\"\n  loading=\"{{ loading }}\"\n  disabled=\"{{ disabled }}\"\n  open-type=\"{{ openType }}\"\n  custom-class=\"{{ utils.bem('goods-action-button', [type, { first: isFirst, last: isLast }]) }}\"\n  business-id=\"{{ businessId }}\"\n  session-from=\"{{ sessionFrom }}\"\n  app-parameter=\"{{ appParameter }}\"\n  send-message-img=\"{{ sendMessageImg }}\"\n  send-message-path=\"{{ sendMessagePath }}\"\n  show-message-card=\"{{ showMessageCard }}\"\n  send-message-title=\"{{ sendMessageTitle }}\"\n  bind:click=\"onClick\"\n  binderror=\"bindError\"\n  bindcontact=\"bindContact\"\n  bindopensetting=\"bindOpenSetting\"\n  bindgetuserinfo=\"bindGetUserInfo\"\n  bindgetphonenumber=\"bindGetPhoneNumber\"\n  bindlaunchapp=\"bindLaunchApp\"\n>\n  {{ text }}\n</van-button>\n","ts":"import { VantComponent } from '../common/component';\nimport { link } from '../mixins/link';\nimport { button } from '../mixins/button';\nimport { openType } from '../mixins/open-type';\nimport { Weapp } from 'definitions/weapp';\n\nVantComponent({\n  mixins: [link, button, openType],\n  relation: {\n    type: 'ancestor',\n    name: 'goods-action',\n    linked(parent) {\n      this.parent = parent;\n    }\n  },\n  props: {\n    text: String,\n    color: String,\n    loading: Boolean,\n    disabled: Boolean,\n    type: {\n      type: String,\n      value: 'danger'\n    }\n  },\n\n  mounted() {\n    this.updateStyle();\n  },\n\n  methods: {\n    onClick(event: Weapp.Event) {\n      this.$emit('click', event.detail);\n      this.jumpLink();\n    },\n\n    updateStyle() {\n      const { children = [] } = this.parent;\n      const index = children.indexOf(this);\n\n      this.setData({\n        isFirst: index === 0,\n        isLast: index === children.length - 1\n      });\n    }\n  }\n});\n"},"goods-action-icon":{"ts":"import { VantComponent } from '../common/component';\nimport { link } from '../mixins/link';\nimport { button } from '../mixins/button';\nimport { openType } from '../mixins/open-type';\nimport { Weapp } from 'definitions/weapp';\n\nVantComponent({\n  classes: ['icon-class', 'text-class'],\n\n  mixins: [link, button, openType],\n\n  props: {\n    text: String,\n    dot: Boolean,\n    info: String,\n    icon: String,\n    disabled: Boolean,\n    loading: Boolean\n  },\n\n  methods: {\n    onClick(event: Weapp.Event) {\n      this.$emit('click', event.detail);\n      this.jumpLink();\n    }\n  }\n});\n","wxml":"<van-button\n  square\n  id=\"{{ id }}\"\n  size=\"large\"\n  lang=\"{{ lang }}\"\n  loading=\"{{ loading }}\"\n  disabled=\"{{ disabled }}\"\n  open-type=\"{{ openType }}\"\n  business-id=\"{{ businessId }}\"\n  custom-class=\"van-goods-action-icon\"\n  session-from=\"{{ sessionFrom }}\"\n  app-parameter=\"{{ appParameter }}\"\n  send-message-img=\"{{ sendMessageImg }}\"\n  send-message-path=\"{{ sendMessagePath }}\"\n  show-message-card=\"{{ showMessageCard }}\"\n  send-message-title=\"{{ sendMessageTitle }}\"\n  bind:click=\"onClick\"\n  binderror=\"bindError\"\n  bindcontact=\"bindContact\"\n  bindopensetting=\"bindOpenSetting\"\n  bindgetuserinfo=\"bindGetUserInfo\"\n  bindgetphonenumber=\"bindGetPhoneNumber\"\n  bindlaunchapp=\"bindLaunchApp\"\n>\n  <view class=\"van-goods-action-icon__content\">\n    <van-icon\n      wx:if=\"{{ icon }}\"\n      size=\"20px\"\n      name=\"{{ icon }}\"\n      dot=\"{{ dot }}\"\n      info=\"{{ info }}\"\n      class=\"van-goods-action-icon__icon\"\n      custom-class=\"icon-class\"\n    />\n    <slot name=\"icon\" />\n    <text class=\"text-class\">{{ text }}</text>\n  </view>\n</van-button>\n"},"grid":{"ts":"import { VantComponent } from '../common/component';\n\nVantComponent({\n  relation: {\n    name: 'grid-item',\n    type: 'descendant',\n    linked(child) {\n      this.children.push(child);\n    },\n    unlinked(child) {\n      this.children = this.children.filter(\n        (item: WechatMiniprogram.Component.TrivialInstance) => item !== child\n      );\n    }\n  },\n\n  props: {\n    square: {\n      type: Boolean,\n      observer: 'updateChildren'\n    },\n    gutter: {\n      type: [Number, String],\n      value: 0,\n      observer: 'updateChildren'\n    },\n    clickable: {\n      type: Boolean,\n      observer: 'updateChildren'\n    },\n    columnNum: {\n      type: Number,\n      value: 4,\n      observer: 'updateChildren'\n    },\n    center: {\n      type: Boolean,\n      value: true,\n      observer: 'updateChildren'\n    },\n    border: {\n      type: Boolean,\n      value: true,\n      observer: 'updateChildren'\n    }\n  },\n\n  beforeCreate() {\n    this.children = [];\n  },\n\n  created() {\n    const { gutter } = this.data;\n    if (gutter) {\n      this.setData({\n        style: `padding-left: ${gutter}px`\n      });\n    }\n  },\n\n  methods: {\n    updateChildren() {\n      this.children.forEach(\n        (child: WechatMiniprogram.Component.TrivialInstance) => {\n          child.updateStyle();\n        }\n      );\n    }\n  }\n});\n","wxml":"<view class=\"van-grid {{ border && !gutter ? 'van-hairline--top' : '' }}\" style=\"{{ style }}\">\n  <slot />\n</view>\n"},"grid-item":{"ts":"import { link } from '../mixins/link';\nimport { VantComponent } from '../common/component';\n\nVantComponent({\n  relation: {\n    name: 'grid',\n    type: 'ancestor',\n    linked(parent) {\n      this.parent = parent;\n    }\n  },\n\n  mixins: [link],\n\n  props: {\n    icon: String,\n    dot: Boolean,\n    info: null,\n    text: String,\n    useSlot: Boolean\n  },\n\n  mounted() {\n    this.updateStyle();\n  },\n\n  methods: {\n    updateStyle() {\n      if (!this.parent) {\n        return;\n      }\n\n      const { data, children } = this.parent;\n      const { columnNum, border, square, gutter, clickable, center } = data;\n      const width = `${100 / columnNum}%`;\n\n      const styleWrapper: Array<string> = [];\n      styleWrapper.push(`width: ${width}`);\n\n      if (square) {\n        styleWrapper.push(`padding-top: ${width}`);\n      }\n\n      if (gutter) {\n        styleWrapper.push(`padding-right: ${gutter}px`);\n\n        const index = children.indexOf(this);\n        if (index >= columnNum) {\n          styleWrapper.push(`margin-top: ${gutter}px`);\n        }\n      }\n\n      this.setData({\n        style: styleWrapper.join('; '),\n        center,\n        border,\n        square,\n        gutter,\n        clickable\n      });\n    },\n\n    onClick() {\n      this.$emit('click');\n      this.jumpLink();\n    }\n  }\n});\n","wxml":"<wxs src=\"../wxs/utils.wxs\" module=\"utils\" />\n\n<view class=\"{{ utils.bem('grid-item', { square }) }}\" style=\"{{ style }}\" bindtap=\"onClick\">\n  <view class=\"{{ utils.bem('grid-item__content', { center, square, clickable, surround: border && gutter }) }} {{ border ? 'van-hairline--surround' : '' }}\">\n    <block wx:if=\"{{ useSlot }}\">\n      <slot />\n    </block>\n    <block wx:else>\n      <view class=\"van-grid-item__icon\">\n        <van-icon wx:if=\"{{ icon }}\" name=\"{{ icon }}\" dot=\"{{ dot }}\" info=\"{{ info }}\" />\n        <slot wx:else name=\"icon\"></slot>\n      </view>\n      <view class=\"van-grid-item__text\">\n        <text wx:if=\"{{ text }}\">{{ text }}</text>\n        <slot wx:else name=\"text\"></slot>\n      </view>\n    </block>\n  </view>\n</view>\n"},"icon":{"ts":"import { VantComponent } from '../common/component';\nimport { addUnit } from '../common/utils';\n\nVantComponent({\n  props: {\n    dot: Boolean,\n    info: null,\n    size: {\n      type: null,\n      observer: 'setSizeWithUnit'\n    },\n    color: String,\n    customStyle: String,\n    classPrefix: {\n      type: String,\n      value: 'van-icon'\n    },\n    name: {\n      type: String,\n      observer(val) {\n        this.setData({\n          isImageName: val.indexOf('/') !== -1\n        });\n      }\n    }\n  },\n\n  data: {\n    sizeWithUnit: null,\n  },\n\n  methods: {\n    onClick() {\n      this.$emit('click');\n    },\n\n    setSizeWithUnit(size: string | number): void {\n      this.setData({\n        sizeWithUnit: addUnit(size)\n      });\n    }\n  }\n});\n","wxml":"<view\n  class=\"custom-class {{ classPrefix }} {{ isImageName ? 'van-icon--image' : classPrefix + '-' + name }}\"\n  style=\"{{ color ? 'color: ' + color + ';' : '' }}{{ size ? 'font-size: ' + sizeWithUnit + ';' : '' }}{{ customStyle }}\"\n  bind:tap=\"onClick\"\n>\n  <van-info\n    wx:if=\"{{ info !== null || dot }}\"\n    dot=\"{{ dot }}\"\n    info=\"{{ info }}\"\n    custom-class=\"van-icon__info\"\n  />\n  <image\n    wx:if=\"{{ isImageName }}\"\n    src=\"{{ name }}\"\n    mode=\"aspectFit\"\n    class=\"van-icon__image\"\n  />\n</view>\n"},"info":{"ts":"import { VantComponent } from '../common/component';\n\nVantComponent({\n  props: {\n    dot: Boolean,\n    info: null,\n    customStyle: String\n  }\n});\n","wxml":"<wxs src=\"../wxs/utils.wxs\" module=\"utils\" />\n\n<view\n  wx:if=\"{{ info !== null && info !== '' || dot }}\"\n  class=\"custom-class van-info {{ utils.bem('info', { dot }) }}\"\n  style=\"{{ customStyle }}\"\n>{{ dot ? '' : info }}</view>\n"},"image":{"ts":"import { addUnit, isDef } from '../common/utils';\nimport { VantComponent } from '../common/component';\nimport { button } from '../mixins/button';\nimport { openType } from '../mixins/open-type';\n\nVantComponent({\n  mixins: [button, openType],\n\n  classes: ['custom-class', 'loading-class', 'error-class', 'image-class'],\n\n  props: {\n    src: String,\n    width: String,\n    height: String,\n    fit: {\n      type: String,\n      value: 'fill'\n    },\n    round: Boolean,\n    lazyLoad: Boolean,\n    showError: {\n      type: Boolean,\n      value: true\n    },\n    showLoading: {\n      type: Boolean,\n      value: true\n    },\n    showMenuByLongpress: Boolean,\n\n    // 受小程序slot限制所需要的属性\n    useLoadingSlot: Boolean,\n    useErrorSlot: Boolean,\n  },\n\n  data: {\n    fitWeapp: 'aspectFit',\n    FIT_MODE_MAP: {\n      contain: 'aspectFit',\n      cover: 'aspectFill',\n      fill: 'scaleToFill',\n      none: 'center',\n\n      // TODO: 这个没有原生的属性，需要后面实现，暂时先用contain;\n      'scale-down': 'aspectFit'\n    },\n    loading: true,\n    error: false\n  },\n\n  watch: {\n    src() {\n      this.setData({\n        loading: true,\n        error: false\n      });\n    }\n  },\n\n  mounted() {\n    this.init();\n  },\n\n  methods: {\n    init() {\n      const { FIT_MODE_MAP, fit } = this.data;\n\n      this.setData({\n        mode: FIT_MODE_MAP[fit],\n        style: this.getStyle(),\n      });\n    },\n\n    getStyle() {\n      const { width, height } = this.data;\n      let style = '';\n\n      if (isDef(width)) {\n        style += `width: ${addUnit(width)};`;\n      }\n\n      if (isDef(height)) {\n        style += `height: ${addUnit(height)};`;\n      }\n\n      return style;\n    },\n\n    onLoad(event) {\n      this.setData({\n        loading: false\n      });\n\n      this.$emit('load', event.detail);\n    },\n\n    onError(event) {\n      this.setData({\n        loading: false,\n        error: true,\n      });\n\n      this.$emit('error', event.detail);\n    },\n\n    onClick(event) {\n      this.$emit('click', event.detail);\n    },\n  }\n});\n","wxml":"<wxs src=\"../wxs/utils.wxs\" module=\"utils\" />\n\n<view\n  class=\"custom-class {{ utils.bem('image', { round })}}\"\n  style=\"{{ style }}\"\n  bind:tap=\"onClick\"\n>\n  <image\n    wx:if=\"{{ !error }}\"\n    class=\"image-class van-image__img\"\n    mode=\"{{ mode }}\"\n    src=\"{{ src }}\"\n    lazy-load=\"{{ lazyLoad }}\"\n    show-menu-by-longpress=\"{{ showMenuByLongpress }}\"\n    bind:load=\"onLoad\"\n    bind:error=\"onError\"\n  />\n\n  <div\n    wx:if=\"{{ loading && showLoading }}\"\n    class=\"loading-class van-image__loading\"\n  >\n    <slot\n      wx:if=\"{{ useLoadingSlot }}\"\n      name=\"loading\"\n    />\n    <van-icon\n      wx:else\n      name=\"photo-o\"\n      size=\"22\"\n    />\n  </div>\n  <div\n    wx:if=\"{{ error && showError }}\"\n    class=\"error-class van-image__error\"\n  >\n    <slot\n      wx:if=\"{{ useErrorSlot }}\"\n      name=\"error\"\n    />\n    <van-icon\n      wx:else\n      name=\"warning-o\"\n      size=\"22\"\n    />\n  </div>\n</view>\n"},"loading":{"wxml":"<view class=\"van-loading {{vertical ? 'van-loading--vertical' : ''}}\">\n  <view\n    class=\"van-loading__wrapper custom-class\"\n    style=\"width: {{ sizeWithUnit }}; height: {{ sizeWithUnit }}\"\n  >\n    <view\n      class=\"van-loading__spinner van-loading__spinner--{{ type }}\"\n      style=\"color: {{ color }};\"\n    >\n      <view\n        wx:if=\"{{ type === 'spinner' }}\"\n        wx:for=\"item in 12\"\n        wx:key=\"index\"\n        class=\"van-loading__dot\"\n      />\n    </view>\n  </view>\n  <view \n    style=\"font-size: {{textSizeWithUnit}};\" \n    class=\"van-loading__text {{vertical ? 'van-loading__text--vertical' : ''}}\"\n  >\n    <slot />\n  </view>\n</view>","ts":"import { VantComponent } from '../common/component';\nimport { addUnit } from '../common/utils';\n\nVantComponent({\n  props: {\n    size: {\n      type: String,\n      observer: 'setSizeWithUnit'\n    },\n    type: {\n      type: String,\n      value: 'circular'\n    },\n    color: {\n      type: String,\n      value: '#c9c9c9'\n    },\n    textSize: {\n      type: String,\n      observer: 'setTextSizeWithUnit'\n    },\n    vertical: Boolean\n  },\n\n  data: {\n    sizeWithUnit: '30px',\n    textSizeWithUnit: '14px'\n  },\n\n  methods: {\n    setSizeWithUnit(size: string | number): void {\n      this.setData({\n        sizeWithUnit: addUnit(size)\n      });\n    },\n\n    setTextSizeWithUnit(size: string | number): void {\n      this.set({\n        textSizeWithUnit: addUnit(size)\n      });\n    }\n  }\n});\n"},"nav-bar":{"ts":"import { VantComponent } from '../common/component';\n\nVantComponent({\n  classes: ['title-class'],\n\n  props: {\n    title: String,\n    fixed: Boolean,\n    leftText: String,\n    rightText: String,\n    leftArrow: Boolean,\n    border: {\n      type: Boolean,\n      value: true\n    },\n    zIndex: {\n      type: Number,\n      value: 1\n    },\n    safeAreaInsetTop: {\n      type: Boolean,\n      value: true\n    },\n  },\n\n  data: {\n    statusBarHeight: 0\n  },\n\n  created() {\n    const { statusBarHeight } = wx.getSystemInfoSync();\n    this.setData({ statusBarHeight });\n  },\n\n  methods: {\n    onClickLeft() {\n      this.$emit('click-left');\n    },\n\n    onClickRight() {\n      this.$emit('click-right');\n    }\n  }\n});\n","wxml":"<wxs src=\"../wxs/utils.wxs\" module=\"utils\" />\n\n<view\n  class=\"{{ utils.bem('nav-bar', { fixed }) }} custom-class {{ border ? 'van-hairline--bottom' : '' }}\"\n  style=\"z-index: {{ zIndex }}; padding-top: {{ safeAreaInsetTop ? statusBarHeight : 0 }}px;\"\n>\n  <view class=\"van-nav-bar__left\" bind:tap=\"onClickLeft\">\n    <block wx:if=\"{{ leftArrow || leftText }}\">\n      <van-icon\n        wx:if=\"{{ leftArrow }}\"\n        size=\"16px\"\n        name=\"arrow-left\"\n        custom-class=\"van-nav-bar__arrow\"\n      />\n      <view\n        wx:if=\"{{ leftText }}\"\n        class=\"van-nav-bar__text\"\n        hover-class=\"van-nav-bar__text--hover\"\n        hover-stay-time=\"70\"\n      >{{ leftText }}</view>\n    </block>\n    <slot wx:else name=\"left\" />\n  </view>\n  <view class=\"van-nav-bar__title title-class van-ellipsis\">\n    <block wx:if=\"{{ title }}\">{{ title }}</block>\n    <slot wx:else name=\"title\" />\n  </view>\n  <view class=\"van-nav-bar__right\" bind:tap=\"onClickRight\">\n    <view\n      wx:if=\"{{ rightText }}\"\n      class=\"van-nav-bar__text\"\n      hover-class=\"van-nav-bar__text--hover\"\n      hover-stay-time=\"70\"\n    >{{ rightText }}</view>\n    <slot wx:else name=\"right\" />\n  </view>\n</view>\n"},"notice-bar":{"ts":"import { VantComponent } from '../common/component';\nimport { Weapp } from 'definitions/weapp';\n\nconst FONT_COLOR = '#ed6a0c';\nconst BG_COLOR = '#fffbe8';\n\nVantComponent({\n  props: {\n    text: {\n      type: String,\n      value: ''\n    },\n    mode: {\n      type: String,\n      value: ''\n    },\n    url: {\n      type: String,\n      value: ''\n    },\n    openType: {\n      type: String,\n      value: 'navigate'\n    },\n    delay: {\n      type: Number,\n      value: 1\n    },\n    speed: {\n      type: Number,\n      value: 50\n    },\n    scrollable: {\n      type: Boolean,\n      value: true\n    },\n    leftIcon: {\n      type: String,\n      value: ''\n    },\n    color: {\n      type: String,\n      value: FONT_COLOR\n    },\n    backgroundColor: {\n      type: String,\n      value: BG_COLOR\n    },\n    wrapable: Boolean\n  },\n\n  data: {\n    show: true\n  },\n\n  watch: {\n    text() {\n      this.setData({}, this.init);\n    }\n  },\n\n  created() {\n    this.resetAnimation = wx.createAnimation({\n      duration: 0,\n      timingFunction: 'linear'\n    });\n  },\n\n  destroyed() {\n    this.timer && clearTimeout(this.timer);\n  },\n\n  methods: {\n    init() {\n      Promise.all([\n        this.getRect('.van-notice-bar__content'),\n        this.getRect('.van-notice-bar__wrap')\n      ]).then((rects: WechatMiniprogram.BoundingClientRectCallbackResult[]) => {\n        const [contentRect, wrapRect] = rects;\n        if (\n          contentRect == null ||\n          wrapRect == null ||\n          !contentRect.width ||\n          !wrapRect.width\n        ) {\n          return;\n        }\n\n        const { speed, scrollable, delay } = this.data;\n\n        if (scrollable && wrapRect.width < contentRect.width) {\n          const duration = (contentRect.width / speed) * 1000;\n\n          this.wrapWidth = wrapRect.width;\n          this.contentWidth = contentRect.width;\n          this.duration = duration;\n          this.animation = wx.createAnimation({\n            duration,\n            timingFunction: 'linear',\n            delay\n          });\n\n          this.scroll();\n        }\n      });\n    },\n\n    scroll() {\n      this.timer && clearTimeout(this.timer);\n      this.timer = null;\n\n      this.setData({\n        animationData: this.resetAnimation\n          .translateX(this.wrapWidth)\n          .step()\n          .export()\n      });\n\n      setTimeout(() => {\n        this.setData({\n          animationData: this.animation\n            .translateX(-this.contentWidth)\n            .step()\n            .export()\n        });\n      }, 20);\n\n      this.timer = setTimeout(() => {\n        this.scroll();\n      }, this.duration);\n    },\n\n    onClickIcon() {\n      this.timer && clearTimeout(this.timer);\n      this.timer = null;\n\n      this.setData({ show: false });\n    },\n\n    onClick(event: Weapp.Event) {\n      this.$emit('click', event);\n    }\n  }\n});\n","wxml":"<wxs src=\"../wxs/utils.wxs\" module=\"utils\" />\n\n<view\n  wx:if=\"{{ show }}\"\n  class=\"custom-class {{ utils.bem('notice-bar', { withicon: mode, wrapable }) }}\"\n  style=\"color: {{ color }}; background-color: {{ backgroundColor }};\"\n  bind:tap=\"onClick\"\n>\n  <van-icon\n    wx:if=\"{{ leftIcon }}\"\n    size=\"16px\"\n    name=\"{{ leftIcon }}\"\n    class=\"van-notice-bar__left-icon\"\n  />\n  <slot wx:else name=\"left-icon\" />\n\n  <view class=\"van-notice-bar__wrap\">\n    <view class=\"van-notice-bar__content {{ !scrollable && !wrapable ? 'van-ellipsis' : '' }}\" animation=\"{{ animationData }}\">\n      {{ text }}\n    </view>\n  </view>\n\n  <van-icon\n    wx:if=\"{{ mode === 'closeable' }}\"\n    class=\"van-notice-bar__right-icon\"\n    name=\"cross\"\n    bind:tap=\"onClickIcon\"\n  />\n  <navigator\n    wx:elif=\"{{ mode === 'link' }}\"\n    url=\"{{ url }}\"\n    open-type=\"{{ openType }}\"\n  >\n    <van-icon class=\"van-notice-bar__right-icon\" name=\"arrow\" />\n  </navigator>\n  <slot wx:else name=\"right-icon\" />\n</view>\n"},"notify":{"ts":"import { WHITE } from '../common/color';\n\ninterface NotifyOptions {\n  type?: 'primary' | 'success' | 'danger' | 'warning';\n  color?: string;\n  zIndex?: number;\n  message: string;\n  context?: any;\n  duration?: number;\n  selector?: string;\n  background?: string;\n  safeAreaInsetTop?: boolean;\n  onClick?: () => void;\n  onOpened?: () => void;\n  onClose?: () => void;\n}\n\nconst defaultOptions = {\n  selector: '#van-notify',\n  type: 'danger',\n  message: '',\n  background: '',\n  duration: 3000,\n  zIndex: 110,\n  color: WHITE,\n  safeAreaInsetTop: false,\n  onClick: () => {},\n  onOpened: () => {},\n  onClose: () => {}\n};\n\nfunction parseOptions(message: NotifyOptions | string): NotifyOptions {\n  return typeof message === 'string' ? { message } : message;\n}\n\nfunction getContext() {\n  const pages = getCurrentPages();\n  return pages[pages.length - 1];\n}\n\nexport default function Notify(options: NotifyOptions | string) {\n  options = Object.assign({}, defaultOptions, parseOptions(options));\n\n  const context = options.context || getContext();\n  const notify = context.selectComponent(options.selector);\n\n  delete options.context;\n  delete options.selector;\n\n  if (notify) {\n    notify.set(options);\n    notify.show();\n  } else {\n    console.warn('未找到 van-notify 节点，请确认 selector 及 context 是否正确');\n  }\n}\n","wxml":"<van-transition\n  name=\"slide-down\"\n  show=\"{{ show }}\"\n  custom-class=\"van-notify__container\"\n  custom-style=\"z-index: {{ zIndex }};\"\n  bind:tap=\"onTap\"\n>\n  <view\n    class=\"van-notify van-notify--{{ type }}\"\n    style=\"background:{{ background }};color:{{ color }};\"\n  >\n    <view wx:if=\"{{ safeAreaInsetTop }}\" class=\"van-notify__safe-area\"></view>\n    <text>{{ message }}</text>\n  </view>\n</van-transition>\n"},"overlay":{"ts":"\nimport { VantComponent } from '../common/component';\n\nVantComponent({\n  props: {\n    show: Boolean,\n    customStyle: String,\n    duration: {\n      type: null,\n      value: 300\n    },\n    zIndex: {\n      type: Number,\n      value: 1\n    }\n  },\n\n  methods: {\n    onClick() {\n      this.$emit('click');\n    },\n\n    // for prevent touchmove\n    noop() {}\n  }\n});\n","wxml":"<van-transition\n  show=\"{{ show }}\"\n  custom-class=\"van-overlay\"\n  custom-style=\"z-index: {{ zIndex }}; {{ customStyle }}\"\n  duration=\"{{ duration }}\"\n  bind:tap=\"onClick\"\n  catch:touchmove=\"noop\"\n/>\n"},"panel":{"ts":"import { VantComponent } from '../common/component';\n\nVantComponent({\n  classes: ['header-class', 'footer-class'],\n\n  props: {\n    desc: String,\n    title: String,\n    status: String,\n    useFooterSlot: Boolean\n  }\n});\n","wxml":"<view class=\"van-panel van-hairline--top-bottom custom-class\">\n  <van-cell \n    wx:if=\"{{ title || desc || status }}\"\n    title=\"{{ title }}\"\n    label=\"{{ desc }}\"\n    value=\"{{ status }}\"\n    custom-class=\"header-class\"\n    value-class=\"van-panel__header-value\"\n  />\n  <slot wx:else name=\"header\" />\n\n  <view class=\"van-panel__content\">\n    <slot />\n  </view>\n\n  <view wx:if=\"{{ useFooterSlot }}\" class=\"van-panel__footer van-hairline--top footer-class\">\n    <slot name=\"footer\" />\n  </view>\n</view>\n"},"picker-column":{"ts":"import { VantComponent } from '../common/component';\nimport { isObj, range } from '../common/utils';\nimport { Weapp } from 'definitions/weapp';\n\nconst DEFAULT_DURATION = 200;\n\nVantComponent({\n  classes: ['active-class'],\n\n  props: {\n    valueKey: String,\n    className: String,\n    itemHeight: Number,\n    visibleItemCount: Number,\n    initialOptions: {\n      type: Array,\n      value: []\n    },\n    defaultIndex: {\n      type: Number,\n      value: 0\n    }\n  },\n\n  data: {\n    startY: 0,\n    offset: 0,\n    duration: 0,\n    startOffset: 0,\n    options: [],\n    currentIndex: 0\n  },\n\n  created() {\n    const { defaultIndex, initialOptions } = this.data;\n\n    this.set({\n      currentIndex: defaultIndex,\n      options: initialOptions\n    }).then(() => {\n      this.setIndex(defaultIndex);\n    });\n  },\n\n  watch: {\n    defaultIndex(value: number) {\n      this.setIndex(value);\n    }\n  },\n\n  methods: {\n    getCount() {\n      return this.data.options.length;\n    },\n\n    onTouchStart(event: Weapp.TouchEvent) {\n      this.setData({\n        startY: event.touches[0].clientY,\n        startOffset: this.data.offset,\n        duration: 0\n      });\n    },\n\n    onTouchMove(event: Weapp.TouchEvent) {\n      const { data } = this;\n      const deltaY = event.touches[0].clientY - data.startY;\n      this.setData({\n        offset: range(\n          data.startOffset + deltaY,\n          -(this.getCount() * data.itemHeight),\n          data.itemHeight\n        )\n      });\n    },\n\n    onTouchEnd() {\n      const { data } = this;\n      if (data.offset !== data.startOffset) {\n        this.setData({ duration: DEFAULT_DURATION });\n\n        const index = range(\n          Math.round(-data.offset / data.itemHeight),\n          0,\n          this.getCount() - 1\n        );\n        this.setIndex(index, true);\n      }\n    },\n\n    onClickItem(event: Weapp.Event) {\n      const { index } = event.currentTarget.dataset;\n      this.setIndex(index, true);\n    },\n\n    adjustIndex(index: number) {\n      const { data } = this;\n      const count = this.getCount();\n\n      index = range(index, 0, count);\n      for (let i = index; i < count; i++) {\n        if (!this.isDisabled(data.options[i])) return i;\n      }\n      for (let i = index - 1; i >= 0; i--) {\n        if (!this.isDisabled(data.options[i])) return i;\n      }\n    },\n\n    isDisabled(option: any) {\n      return isObj(option) && option.disabled;\n    },\n\n    getOptionText(option: any) {\n      const { data } = this;\n      return isObj(option) && data.valueKey in option\n        ? option[data.valueKey]\n        : option;\n    },\n\n    setIndex(index: number, userAction: boolean) {\n      const { data } = this;\n      index = this.adjustIndex(index) || 0;\n      const offset = -index * data.itemHeight;\n\n      if (index !== data.currentIndex) {\n        return this.set({ offset, currentIndex: index }).then(() => {\n          userAction && this.$emit('change', index);\n        });\n      }\n\n      return this.set({ offset });\n    },\n\n    setValue(value: string) {\n      const { options } = this.data;\n      for (let i = 0; i < options.length; i++) {\n        if (this.getOptionText(options[i]) === value) {\n          return this.setIndex(i);\n        }\n      }\n      return Promise.resolve();\n    },\n\n    getValue() {\n      const { data } = this;\n      return data.options[data.currentIndex];\n    }\n  }\n});\n","wxml":"<wxs src=\"./index.wxs\" module=\"getOptionText\" />\n\n<view\n  class=\"van-picker-column custom-class\"\n  style=\"height: {{ itemHeight * visibleItemCount }}px\"\n  bind:touchstart=\"onTouchStart\"\n  catch:touchmove=\"onTouchMove\"\n  bind:touchend=\"onTouchEnd\"\n  bind:touchcancel=\"onTouchEnd\"\n>\n  <view style=\"transition: transform {{ duration }}ms; line-height: {{ itemHeight }}px; transform: translate3d(0, {{ offset + (itemHeight * (visibleItemCount - 1)) / 2 }}px, 0)\">\n    <view\n      wx:for=\"{{ options }}\"\n      wx:for-item=\"option\"\n      wx:key=\"index\"\n      data-index=\"{{ index }}\"\n      style=\"height: {{ itemHeight }}px\"\n      class=\"van-ellipsis van-picker-column__item {{ option && option.disabled ? 'van-picker-column__item--disabled' : '' }} {{ index === currentIndex ? 'van-picker-column__item--selected active-class' : '' }}\"\n      bindtap=\"onClickItem\"\n    >{{ getOptionText(option, valueKey) }}</view>\n  </view>\n</view>\n"},"picker":{"ts":"export const pickerProps = {\n  title: String,\n  loading: Boolean,\n  showToolbar: Boolean,\n  cancelButtonText: {\n    type: String,\n    value: '取消'\n  },\n  confirmButtonText: {\n    type: String,\n    value: '确认'\n  },\n  visibleItemCount: {\n    type: Number,\n    value: 5\n  },\n  itemHeight: {\n    type: Number,\n    value: 44\n  }\n};\n","wxml":"<template name=\"toolbar\">\n  <view\n    wx:if=\"{{ showToolbar }}\"\n    class=\"van-picker__toolbar van-hairline--top-bottom toolbar-class\"\n  >\n    <view\n      class=\"van-picker__cancel\"\n      hover-class=\"van-picker__cancel--hover\"\n      hover-stay-time=\"70\"\n      data-type=\"cancel\"\n      bindtap=\"emit\"\n    >\n      {{ cancelButtonText }}\n    </view>\n    <view wx:if=\"{{ title }}\" class=\"van-picker__title van-ellipsis\">{{ title }}</view>\n    <view\n      class=\"van-picker__confirm\"\n      hover-class=\"van-picker__confirm--hover\"\n      hover-stay-time=\"70\"\n      data-type=\"confirm\"\n      bindtap=\"emit\"\n    >\n      {{ confirmButtonText }}\n    </view>\n  </view>\n</template>\n\n<view class=\"van-picker custom-class\">\n  <template is=\"toolbar\" wx:if=\"{{ toolbarPosition === 'top' }}\" data=\"{{ showToolbar, cancelButtonText, title, confirmButtonText }}\"></template>\n  <view wx:if=\"{{ loading }}\" class=\"van-picker__loading\">\n    <loading color=\"#1989fa\"/>\n  </view>\n  <view\n    class=\"van-picker__columns\"\n    style=\"height: {{ itemHeight * visibleItemCount }}px\"\n    catch:touchmove=\"noop\"\n  >\n    <picker-column\n      class=\"van-picker__column\"\n      wx:for=\"{{ isSimple(columns) ? [columns] : columns }}\"\n      wx:key=\"{{ index }}\"\n      data-index=\"{{ index }}\"\n      custom-class=\"column-class\"\n      value-key=\"{{ valueKey }}\"\n      initial-options=\"{{ isSimple(columns) ? item : item.values }}\"\n      default-index=\"{{ item.defaultIndex || defaultIndex }}\"\n      item-height=\"{{ itemHeight }}\"\n      visible-item-count=\"{{ visibleItemCount }}\"\n      active-class=\"active-class\"\n      bind:change=\"onChange\"\n    />\n    <view\n      class=\"van-picker__frame van-hairline--top-bottom\"\n      style=\"height: {{ itemHeight }}px\"\n    />\n  </view>\n  <template is=\"toolbar\" wx:if=\"{{ toolbarPosition === 'bottom' }}\" data=\"{{ showToolbar, cancelButtonText, title, confirmButtonText }}\"></template>\n</view>\n\n<wxs module=\"isSimple\">\n  function isSimple(columns) {\n    return columns.length && !columns[0].values;\n  }\n  module.exports = isSimple;\n</wxs>\n"},"popup":{"ts":"import { VantComponent } from '../common/component';\nimport { transition } from '../mixins/transition';\n\nVantComponent({\n  classes: [\n    'enter-class',\n    'enter-active-class',\n    'enter-to-class',\n    'leave-class',\n    'leave-active-class',\n    'leave-to-class'\n  ],\n\n  mixins: [transition(false)],\n\n  props: {\n    round: Boolean,\n    closeable: Boolean,\n    customStyle: String,\n    overlayStyle: String,\n    transition: {\n      type: String,\n      observer: 'observeClass'\n    },\n    zIndex: {\n      type: Number,\n      value: 100\n    },\n    overlay: {\n      type: Boolean,\n      value: true\n    },\n    closeIcon: {\n      type: String,\n      value: 'cross'\n    },\n    closeIconPosition: {\n      type: String,\n      value: 'top-right'\n    },\n    closeOnClickOverlay: {\n      type: Boolean,\n      value: true\n    },\n    position: {\n      type: String,\n      value: 'center',\n      observer: 'observeClass'\n    },\n    safeAreaInsetBottom: {\n      type: Boolean,\n      value: true\n    },\n    safeAreaInsetTop: {\n      type: Boolean,\n      value: false\n    }\n  },\n\n  created() {\n    this.observeClass();\n  },\n\n  methods: {\n    onClickCloseIcon() {\n      this.$emit('close');\n    },\n\n    onClickOverlay() {\n      this.$emit('click-overlay');\n\n      if (this.data.closeOnClickOverlay) {\n        this.$emit('close');\n      }\n    },\n\n    observeClass() {\n      const { transition, position } = this.data;\n\n      const updateData: { [key: string]: any } = {\n        name: transition || position\n      };\n\n      if (transition === 'none') {\n        updateData.duration = 0;\n      }\n\n      this.setData(updateData);\n    }\n  }\n});\n","wxml":"<wxs src=\"../wxs/utils.wxs\" module=\"utils\" />\n\n<van-overlay\n  wx:if=\"{{ overlay }}\"\n  show=\"{{ show }}\"\n  z-index=\"{{ zIndex }}\"\n  custom-style=\"{{ overlayStyle }}\"\n  duration=\"{{ duration }}\"\n  bind:click=\"onClickOverlay\"\n/>\n<view\n  wx:if=\"{{ inited }}\"\n  class=\"custom-class {{ classes }} {{ utils.bem('popup', [position, { round, safe: safeAreaInsetBottom, safeTop: safeAreaInsetTop }]) }}\"\n  style=\"z-index: {{ zIndex }}; -webkit-transition-duration:{{ currentDuration }}ms; transition-duration:{{ currentDuration }}ms; {{ display ? '' : 'display: none;' }};{{ customStyle }}\"\n  bind:transitionend=\"onTransitionEnd\"\n>\n  <slot />\n  <van-icon\n    wx:if=\"{{ closeable }}\"\n    name=\"{{ closeIcon }}\"\n    class=\"van-popup__close-icon van-popup__close-icon--{{ closeIconPosition }}\"\n    bind:tap=\"onClickCloseIcon\"\n  />\n</view>\n"},"progress":{"ts":"import { VantComponent } from '../common/component';\nimport { BLUE } from '../common/color';\nimport { addUnit } from '../common/utils';\n\nVantComponent({\n  props: {\n    inactive: Boolean,\n    percentage: Number,\n    pivotText: String,\n    pivotColor: String,\n    trackColor: String,\n    showPivot: {\n      type: Boolean,\n      value: true\n    },\n    color: {\n      type: String,\n      value: BLUE\n    },\n    textColor: {\n      type: String,\n      value: '#fff'\n    },\n    strokeWidth: {\n      type: null,\n      observer: 'setStrokeWidthUnit'\n    }\n  },\n\n  data: {\n    strokeWidthUnit: '4px'\n  },\n\n  methods: {\n    setStrokeWidthUnit(val) {\n      this.setData({\n        strokeWidthUnit: addUnit(val)\n      });\n    }\n  }\n});\n","wxml":"<wxs src=\"./index.wxs\" module=\"getters\" />\n\n<view\n  class=\"van-progress custom-class\"\n  style=\"height: {{ strokeWidthUnit }}; {{ trackColor ? 'background: ' + trackColor : '' }}\"\n>\n  <view\n    class=\"van-progress__portion\"\n    style=\"width: {{ percentage }}%; background: {{ inactive ? '#cacaca' : color }}\"\n  >\n    <view\n      wx:if=\"{{ showPivot && getters.text(pivotText, percentage) }}\"\n      style=\"color: {{ textColor }}; background: {{ pivotColor ? pivotColor : inactive ? '#cacaca' : color }}\"\n      class=\"van-progress__pivot\"\n    >\n      {{ getters.text(pivotText, percentage) }}\n    </view>\n  </view>\n</view>\n"},"radio":{"ts":"import { VantComponent } from '../common/component';\nimport { Weapp } from 'definitions/weapp';\nimport { addUnit } from '../common/utils';\n\nVantComponent({\n  field: true,\n\n  relation: {\n    name: 'radio-group',\n    type: 'ancestor',\n    linked(target) {\n      this.parent = target;\n    },\n    unlinked() {\n      this.parent = null;\n    }\n  },\n\n  classes: ['icon-class', 'label-class'],\n\n  props: {\n    value: null,\n    disabled: Boolean,\n    useIconSlot: Boolean,\n    checkedColor: String,\n    labelPosition: {\n      type: String,\n      value: 'right'\n    },\n    labelDisabled: Boolean,\n    shape: {\n      type: String,\n      value: 'round'\n    },\n    iconSize: {\n      type: null,\n      observer: 'setIconSizeUnit'\n    }\n  },\n\n  data: {\n    iconSizeWithUnit: '20px'\n  },\n\n  methods: {\n    setIconSizeUnit(val) {\n      this.setData({\n        iconSizeWithUnit: addUnit(val)\n      });\n    },\n\n    emitChange(value: boolean) {\n      const instance = this.parent || this;\n      instance.$emit('input', value);\n      instance.$emit('change', value);\n    },\n\n    onChange(event: Weapp.Event) {\n      console.log(event);\n      this.emitChange(this.data.name);\n    },\n\n    onClickLabel() {\n      const { disabled, labelDisabled, name } = this.data;\n      if (!disabled && !labelDisabled) {\n        this.emitChange(name);\n      }\n    }\n  }\n});\n","wxml":"<wxs src=\"../wxs/utils.wxs\" module=\"utils\" />\n\n<view class=\"van-radio custom-class\">\n  <view\n    wx:if=\"{{ labelPosition === 'left' }}\"\n    class=\"label-class {{ utils.bem('radio__label', [labelPosition, { disabled }]) }}\"\n    bindtap=\"onClickLabel\"\n  >\n    <slot />\n  </view>\n  <view class=\"van-radio__icon-wrap\" style=\"font-size: {{ iconSizeWithUnit }};\" bindtap=\"onChange\">\n    <slot wx:if=\"{{ useIconSlot }}\" name=\"icon\" />\n    <van-icon\n      wx:else\n      name=\"success\"\n      class=\"{{ utils.bem('radio__icon', [shape, { disabled, checked: value === name }]) }}\"\n      style=\"{{ checkedColor && !disabled && value === name ? 'border-color:' + checkedColor + '; background-color:' + checkedColor + ';' : '' }}\"\n      custom-class=\"icon-class\"\n      custom-style=\"line-height: {{ iconSizeWithUnit }};font-size: .8em;display: block;\"\n    />\n  </view>\n  <view\n    wx:if=\"{{ labelPosition === 'right' }}\"\n    class=\"label-class {{ utils.bem('radio__label', [labelPosition, { disabled }]) }}\"\n    bindtap=\"onClickLabel\"\n  >\n    <slot />\n  </view>\n</view>\n"},"radio-group":{"ts":"import { VantComponent } from '../common/component';\n\nVantComponent({\n  field: true,\n\n  relation: {\n    name: 'radio',\n    type: 'descendant',\n    linked(target) {\n      this.children = this.children || [];\n      this.children.push(target);\n      this.updateChild(target);\n    },\n    unlinked(target) {\n      this.children = this.children.filter(\n        (child: WechatMiniprogram.Component.TrivialInstance) => child !== target\n      );\n    }\n  },\n\n  props: {\n    value: {\n      type: null,\n      observer: 'updateChildren'\n    },\n    disabled: {\n      type: Boolean,\n      observer: 'updateChildren'\n    }\n  },\n\n  methods: {\n    updateChildren() {\n      (this.children || []).forEach((child: WechatMiniprogram.Component.TrivialInstance) =>\n        this.updateChild(child)\n      );\n    },\n\n    updateChild(child: WechatMiniprogram.Component.TrivialInstance) {\n      const { value, disabled } = this.data;\n      child.setData({\n        value,\n        disabled: disabled || child.data.disabled\n      });\n    }\n  }\n});\n","wxml":"<slot />\n"},"rate":{"ts":"import { VantComponent } from '../common/component';\nimport { Weapp } from 'definitions/weapp';\nimport { addUnit } from '../common/utils';\n\nVantComponent({\n  field: true,\n\n  classes: ['icon-class'],\n\n  props: {\n    value: Number,\n    readonly: Boolean,\n    disabled: Boolean,\n    allowHalf: Boolean,\n    size: {\n      type: null,\n      observer: 'setSizeWithUnit'\n    },\n    icon: {\n      type: String,\n      value: 'star'\n    },\n    voidIcon: {\n      type: String,\n      value: 'star-o'\n    },\n    color: {\n      type: String,\n      value: '#ffd21e'\n    },\n    voidColor: {\n      type: String,\n      value: '#c7c7c7'\n    },\n    disabledColor: {\n      type: String,\n      value: '#bdbdbd'\n    },\n    count: {\n      type: Number,\n      value: 5\n    },\n    gutter: {\n      type: null,\n      observer: 'setGutterWithUnit'\n    },\n    touchable: {\n      type: Boolean,\n      value: true\n    }\n  },\n\n  data: {\n    innerValue: 0,\n    gutterWithUnit: undefined,\n    sizeWithUnit: '20px'\n  },\n\n  watch: {\n    value(value: number) {\n      if (value !== this.data.innerValue) {\n        this.setData({ innerValue: value });\n      }\n    }\n  },\n\n  methods: {\n    setSizeWithUnit(val) {\n      this.setData({\n        sizeWithUnit: addUnit(val)\n      });\n    },\n\n    setGutterWithUnit(val) {\n      this.setData({\n        gutterWithUnit: addUnit(val)\n      });\n    },\n\n    onSelect(event: Weapp.Event) {\n      const { data } = this;\n      const { score } = event.currentTarget.dataset;\n      if (!data.disabled && !data.readonly) {\n        this.setData({ innerValue: score + 1 });\n        this.$emit('input', score + 1);\n        this.$emit('change', score + 1);\n      }\n    },\n\n    onTouchMove(event: Weapp.TouchEvent) {\n      const { touchable } = this.data;\n      if (!touchable) return;\n\n      const { clientX } = event.touches[0];\n\n      this.getRect('.van-rate__icon', true).then(\n        (list: WechatMiniprogram.BoundingClientRectCallbackResult[]) => {\n          const target = list\n            .sort(item => item.right - item.left)\n            .find(item => clientX >= item.left && clientX <= item.right);\n          if (target != null) {\n            this.onSelect({\n              ...event,\n              currentTarget: target\n            });\n          }\n        }\n      );\n    }\n  }\n});\n","wxml":"<wxs src=\"../wxs/utils.wxs\" module=\"utils\" />\n\n<view\n  class=\"van-rate custom-class\"\n  bind:touchmove=\"onTouchMove\"\n>\n  <view\n    class=\"van-rate__item\"\n    wx:for=\"{{ count }}\"\n    wx:key=\"index\"\n    style=\"font-size: {{ sizeWithUnit }};padding-right: {{ index !== count - 1 ? gutterWithUnit : '' }}\"\n  >\n    <van-icon\n      name=\"{{ index + 1 <= innerValue ? icon : voidIcon }}\"\n      class=\"van-rate__icon\"\n      custom-class=\"icon-class\"\n      data-score=\"{{ index }}\"\n      color=\"{{ disabled ? disabledColor : index + 1 <= innerValue ? color : voidColor }}\"\n      bind:click=\"onSelect\"\n    />\n\n    <van-icon\n      wx:if=\"{{ allowHalf }}\"\n      name=\"{{ index + 0.5 <= innerValue ? icon : voidIcon }}\"\n      class=\"{{ utils.bem('rate__icon', ['half']) }}\"\n      custom-class=\"icon-class\"\n      data-score=\"{{ index - 0.5 }}\"\n      color=\"{{ disabled ? disabledColor : index + 0.5 <= innerValue ? color : voidColor }}\"\n      bind:click=\"onSelect\"\n    />\n  </view>\n</view>\n"},"row":{"ts":"import { VantComponent } from '../common/component';\n\nVantComponent({\n  relation: {\n    name: 'col',\n    type: 'descendant',\n    linked(target) {\n      if (this.data.gutter) {\n        target.setGutter(this.data.gutter);\n      }\n    }\n  },\n\n  props: {\n    gutter: Number\n  },\n\n  watch: {\n    gutter: 'setGutter'\n  },\n\n  mounted() {\n    if (this.data.gutter) {\n      this.setGutter();\n    }\n  },\n\n  methods: {\n    setGutter() {\n      const { gutter } = this.data;\n      const margin = `-${Number(gutter) / 2}px`;\n      const style = gutter\n        ? `margin-right: ${margin}; margin-left: ${margin};`\n        : '';\n\n      this.setData({ style });\n      this.getRelationNodes('../col/index').forEach(col => {\n        col.setGutter(this.data.gutter);\n      });\n    }\n  }\n});\n","wxml":"<view class=\"custom-class van-row\" style=\"{{ style }}\">\n  <slot />\n</view>\n"},"search":{"ts":"import { VantComponent } from '../common/component';\nimport { Weapp } from 'definitions/weapp';\n\nVantComponent({\n  field: true,\n\n  classes: ['field-class', 'input-class', 'cancel-class'],\n\n  props: {\n    label: String,\n    focus: Boolean,\n    error: Boolean,\n    disabled: Boolean,\n    readonly: Boolean,\n    inputAlign: String,\n    showAction: Boolean,\n    useActionSlot: Boolean,\n    useLeftIconSlot: Boolean,\n    useRightIconSlot: Boolean,\n    leftIcon: {\n      type: String,\n      value: 'search'\n    },\n    rightIcon: String,\n    placeholder: String,\n    placeholderStyle: String,\n    actionText: {\n      type: String,\n      value: '取消'\n    },\n    background: {\n      type: String,\n      value: '#ffffff'\n    },\n    maxlength: {\n      type: Number,\n      value: -1\n    },\n    shape: {\n      type: String,\n      value: 'square'\n    },\n    clearable: {\n      type: Boolean,\n      value: true\n    }\n  },\n\n  methods: {\n    onChange(event: Weapp.Event) {\n      this.setData({ value: event.detail });\n      this.$emit('change', event.detail);\n    },\n\n    onCancel() {\n      /**\n       * 修复修改输入框值时，输入框失焦和赋值同时触发，赋值失效\n       * https://github.com/youzan/vant-weapp/issues/1768\n       */\n      setTimeout(() => {\n        this.setData({ value: '' });\n        this.$emit('cancel');\n        this.$emit('change', '');\n      }, 200);\n    },\n\n    onSearch() {\n      this.$emit('search', this.data.value);\n    },\n\n    onFocus() {\n      this.$emit('focus');\n    },\n\n    onBlur() {\n      this.$emit('blur');\n    },\n\n    onClear() {\n      this.$emit('clear');\n    },\n  }\n});\n","wxml":"<wxs src=\"../wxs/utils.wxs\" module=\"utils\" />\n\n<view\n  class=\"{{ utils.bem('search', { withaction: showAction || useActionSlot }) }} custom-class\"\n  style=\"background: {{ background }}\"\n>\n  <view class=\"{{ utils.bem('search__content', [shape]) }}\">\n    <view class=\"van-search__label\" wx:if=\"{{ label }}\">{{ label }}</view>\n    <slot wx:else name=\"label\" />\n\n    <van-field\n      type=\"search\"\n      left-icon=\"{{ !useLeftIconSlot ? leftIcon : '' }}\"\n      right-icon=\"{{ !useRightIconSlot ? rightIcon : '' }}\"\n      focus=\"{{ focus }}\"\n      error=\"{{ error }}\"\n      border=\"{{ false }}\"\n      confirm-type=\"search\"\n      class=\"van-search__field field-class\"\n      value=\"{{ value }}\"\n      disabled=\"{{ disabled }}\"\n      readonly=\"{{ readonly }}\"\n      clearable=\"{{ clearable }}\"\n      maxlength=\"{{ maxlength }}\"\n      input-align=\"{{ inputAlign }}\"\n      input-class=\"input-class\"\n      placeholder=\"{{ placeholder }}\"\n      placeholder-style=\"{{ placeholderStyle }}\"\n      custom-style=\"padding: 5px 10px 5px 0; background-color: transparent;\"\n      bind:blur=\"onBlur\"\n      bind:focus=\"onFocus\"\n      bind:change=\"onChange\"\n      bind:confirm=\"onSearch\"\n      bind:clear=\"onClear\"\n    >\n      <slot wx:if=\"{{ useLeftIconSlot }}\" name=\"left-icon\" slot=\"left-icon\" />\n      <slot wx:if=\"{{ useRightIconSlot }}\" name=\"right-icon\" slot=\"right-icon\" />\n    </van-field>\n  </view>\n\n  <view\n    wx:if=\"{{ showAction || useActionSlot }}\"\n    class=\"van-search__action\"\n    hover-class=\"van-search__action--hover\"\n    hover-stay-time=\"70\"\n  >\n    <slot wx:if=\"{{ useActionSlot }}\" name=\"action\" />\n    <view wx:else bind:tap=\"onCancel\" class=\"cancel-class\">{{ actionText }}</view>\n  </view>\n</view>\n"},"sidebar":{"ts":"import { VantComponent } from '../common/component';\n\nVantComponent({\n  relation: {\n    name: 'sidebar-item',\n    type: 'descendant',\n    linked(target) {\n      this.items.push(target);\n      this.setActive(this.data.active);\n    },\n    unlinked(target) {\n      this.items = this.items.filter(item => item !== target);\n      this.setActive(this.data.active);\n    }\n  },\n\n  props: {\n    active: {\n      type: Number,\n      value: 0,\n      observer: 'setActive'\n    }\n  },\n\n  beforeCreate() {\n    this.items = [];\n    this.currentActive = -1;\n  },\n\n  methods: {\n    setActive(active: number) {\n      const { items, currentActive } = this;\n\n      if (!items.length) {\n        return Promise.resolve();\n      }\n\n      this.currentActive = active;\n\n      const stack = [];\n\n      if (currentActive !== active && items[currentActive]) {\n        stack.push(items[currentActive].setActive(false));\n      }\n\n      if (items[active]) {\n        stack.push(items[active].setActive(true));\n      }\n\n      return Promise.all(stack);\n    }\n  }\n});\n","wxml":"<view class=\"van-sidebar van-hairline--top-bottom custom-class\">\n  <slot />\n</view>\n"},"sidebar-item":{"ts":"import { VantComponent } from '../common/component';\n\nVantComponent({\n  relation: {\n    type: 'ancestor',\n    name: 'sidebar',\n    linked(target) {\n      this.parent = target;\n    }\n  },\n\n  props: {\n    dot: Boolean,\n    info: null,\n    title: String\n  },\n\n  methods: {\n    onClick() {\n      const { parent } = this;\n\n      if (!parent) {\n        return;\n      }\n\n      const index = parent.items.indexOf(this);\n\n      parent.setActive(index).then(() => {\n        this.$emit('click', index);\n        parent.$emit('change', index);\n      });\n    },\n\n    setActive(active: boolean) {\n      return this.setData({ active });\n    }\n  }\n});\n","wxml":"<wxs src=\"../wxs/utils.wxs\" module=\"utils\" />\n\n<view\n  class=\"{{ utils.bem('sidebar-item', { active }) }} van-hairline custom-class\"\n  hover-class=\"van-sidebar-item--hover\"\n  hover-stay-time=\"70\"\n  bind:tap=\"onClick\"\n>\n  <view class=\"van-sidebar-item__text\">\n    <van-info\n      wx:if=\"{{ info !== null || dot }}\"\n      dot=\"{{ dot }}\"\n      info=\"{{ info }}\"\n      custom-style=\"right: 4px\"\n    />\n    {{ title }}\n  </view>\n</view>\n"},"slider":{"ts":"import { VantComponent } from '../common/component';\nimport { touch } from '../mixins/touch';\nimport { Weapp } from 'definitions/weapp';\nimport { addUnit } from '../common/utils';\n\nVantComponent({\n  mixins: [touch],\n\n  props: {\n    disabled: Boolean,\n    useButtonSlot: Boolean,\n    activeColor: String,\n    inactiveColor: String,\n    max: {\n      type: Number,\n      value: 100\n    },\n    min: {\n      type: Number,\n      value: 0\n    },\n    step: {\n      type: Number,\n      value: 1\n    },\n    value: {\n      type: Number,\n      value: 0\n    },\n    barHeight: {\n      type: null,\n      value: '2px'\n    }\n  },\n\n  watch: {\n    value(value: number) {\n      this.updateValue(value, false);\n    }\n  },\n\n  created() {\n    this.updateValue(this.data.value);\n  },\n\n  methods: {\n    onTouchStart(event: Weapp.TouchEvent) {\n      if (this.data.disabled) return;\n\n      this.touchStart(event);\n      this.startValue = this.format(this.data.value);\n      this.dragStatus = 'start';\n    },\n\n    onTouchMove(event: Weapp.TouchEvent) {\n      if (this.data.disabled) return;\n\n      if (this.dragStatus === 'start') {\n        this.$emit('drag-start');\n      }\n\n      this.touchMove(event);\n      this.dragStatus = 'draging';\n\n      this.getRect('.van-slider').then((rect: WechatMiniprogram.BoundingClientRectCallbackResult) => {\n        const diff = this.deltaX / rect.width * 100;\n        this.newValue = this.startValue + diff;\n        this.updateValue(this.newValue, false, true);\n      });\n    },\n\n    onTouchEnd() {\n      if (this.data.disabled) return;\n\n      if (this.dragStatus === 'draging') {\n        this.updateValue(this.newValue, true);\n        this.$emit('drag-end');\n      }\n    },\n\n    onClick(event: Weapp.TouchEvent) {\n      if (this.data.disabled) return;\n\n      const { min } = this.data;\n\n      this.getRect('.van-slider').then((rect: WechatMiniprogram.BoundingClientRectCallbackResult) => {\n        const value = (event.detail.x - rect.left) / rect.width * this.getRange() + min;\n        this.updateValue(value, true);\n      });\n    },\n\n    updateValue(value: number, end: boolean, drag: boolean) {\n      value = this.format(value);\n      const { barHeight, min } = this.data;\n      const width = `${((value - min) * 100) / this.getRange()}%`;\n\n      this.setData({\n        value,\n        barStyle: `\n          width: ${width};\n          height: ${addUnit(barHeight)};\n          ${drag ? 'transition: none;' : ''}\n        `,\n      });\n\n      if (drag) {\n        this.$emit('drag', { value });\n      }\n\n      if (end) {\n        this.$emit('change', value);\n      }\n    },\n\n    getRange() {\n      const { max, min } = this.data;\n      return max - min;\n    },\n\n    format(value: number) {\n      const { max, min, step } = this.data;\n      return Math.round(Math.max(min, Math.min(value, max)) / step) * step;\n    }\n  }\n});\n","wxml":"<wxs src=\"../wxs/utils.wxs\" module=\"utils\" />\n\n<view\n  class=\"custom-class {{ utils.bem('slider', { disabled }) }}\"\n  style=\"{{ inactiveColor ? 'background:' + inactiveColor : '' }}\"\n  bind:tap=\"onClick\"\n>\n  <view\n    class=\"van-slider__bar\"\n    style=\"{{ barStyle }}; {{ activeColor ? 'background:' + activeColor : '' }}\"\n  >\n    <view\n      class=\"van-slider__button-wrapper\"\n      bind:touchstart=\"onTouchStart\"\n      catch:touchmove=\"onTouchMove\"\n      bind:touchend=\"onTouchEnd\"\n      bind:touchcancel=\"onTouchEnd\"\n    >\n      <slot\n        wx:if=\"{{ useButtonSlot }}\"\n        name=\"button\"\n      />\n      <view\n        wx:else\n        class=\"van-slider__button\"\n      />\n    </view>\n  </view>\n</view>\n"},"stepper":{"ts":"import { VantComponent } from '../common/component';\nimport { Weapp } from 'definitions/weapp';\nimport { addUnit, isDef } from '../common/utils';\n\nconst LONG_PRESS_START_TIME = 600;\nconst LONG_PRESS_INTERVAL = 200;\n\n// add num and avoid float number\nfunction add(num1: number, num2: number): number {\n  const cardinal = 10 ** 10;\n  return Math.round((num1 + num2) * cardinal) / cardinal;\n}\n\nVantComponent({\n  field: true,\n\n  classes: ['input-class', 'plus-class', 'minus-class'],\n\n  props: {\n    value: null,\n    integer: Boolean,\n    disabled: Boolean,\n    inputWidth: null,\n    buttonSize: null,\n    asyncChange: Boolean,\n    disableInput: Boolean,\n    decimalLength: {\n      type: Number,\n      value: null\n    },\n    min: {\n      type: null,\n      value: 1\n    },\n    max: {\n      type: null,\n      value: Number.MAX_SAFE_INTEGER\n    },\n    step: {\n      type: null,\n      value: 1\n    },\n    showPlus: {\n      type: Boolean,\n      value: true\n    },\n    showMinus: {\n      type: Boolean,\n      value: true\n    }\n  },\n\n  watch: {\n    value(value) {\n      if (value === '') {\n        return;\n      }\n\n      const newValue = this.range(value);\n\n      if (typeof newValue === 'number' && +this.data.value !== newValue) {\n        this.setData({ value: newValue });\n      }\n    },\n\n    inputWidth() {\n      this.set({\n        inputStyle: this.computeInputStyle()\n      });\n    },\n\n    buttonSize() {\n      this.set({\n        inputStyle: this.computeInputStyle(),\n        buttonStyle: this.computeButtonStyle()\n      });\n    }\n  },\n\n  data: {\n    focus: false,\n    inputStyle: '',\n    buttonStyle: ''\n  },\n\n  created() {\n    this.setData({\n      value: this.range(this.data.value)\n    });\n  },\n\n  methods: {\n    isDisabled(type: string) {\n      if (type === 'plus') {\n        return this.data.disabled || this.data.value >= this.data.max;\n      }\n\n      return this.data.disabled || this.data.value <= this.data.min;\n    },\n\n    onFocus(event: Weapp.Event) {\n      this.$emit('focus', event.detail);\n    },\n\n    onBlur(event: Weapp.Event) {\n      const value = this.range(this.data.value);\n      this.triggerInput(value);\n      this.$emit('blur', event.detail);\n    },\n\n    // limit value range\n    range(value) {\n      value = String(value).replace(/[^0-9.-]/g, '');\n\n      // format range\n      value = value === '' ? 0 : +value;\n      value = Math.max(Math.min(this.data.max, value), this.data.min);\n\n      // format decimal\n      if (isDef(this.data.decimalLength)) {\n        value = value.toFixed(this.data.decimalLength);\n      }\n\n      return value;\n    },\n\n    onInput(event: Weapp.Event) {\n      const { value = '' } = event.detail || {};\n      this.triggerInput(value);\n    },\n\n    onChange() {\n      const { type } = this;\n      if (this.isDisabled(type)) {\n        this.$emit('overlimit', type);\n        return;\n      }\n\n      const diff = type === 'minus' ? -this.data.step : +this.data.step;\n      const value = add(+this.data.value, diff);\n\n      this.triggerInput(this.range(value));\n      this.$emit(type);\n    },\n\n    longPressStep() {\n      this.longPressTimer = setTimeout(() => {\n        this.onChange();\n        this.longPressStep();\n      }, LONG_PRESS_INTERVAL);\n    },\n\n    onTap(event: Weapp.Event) {\n      const { type } = event.currentTarget.dataset;\n      this.type = type;\n      this.onChange();\n    },\n\n    onTouchStart(event: Weapp.Event) {\n      clearTimeout(this.longPressTimer);\n\n      const { type } = event.currentTarget.dataset;\n      this.type = type;\n      this.isLongPress = false;\n\n      this.longPressTimer = setTimeout(() => {\n        this.isLongPress = true;\n        this.onChange();\n        this.longPressStep();\n      }, LONG_PRESS_START_TIME);\n    },\n\n    onTouchEnd() {\n      clearTimeout(this.longPressTimer);\n    },\n\n    triggerInput(value: string) {\n      this.setData({\n        value: this.data.asyncChange ? this.data.value : value\n      });\n      this.$emit('change', value);\n    },\n\n    computeInputStyle() {\n      let style = '';\n\n      if (this.data.inputWidth) {\n        style = `width: ${addUnit(this.data.inputWidth)};`;\n      }\n\n      if (this.data.buttonSize) {\n        style += `height: ${addUnit(this.data.buttonSize)};`;\n      }\n\n      return style;\n    },\n\n    computeButtonStyle() {\n      let style = '';\n      const size = addUnit(this.data.buttonSize);\n\n      if (this.data.buttonSize) {\n        style = `width: ${size};height: ${size};`;\n      }\n\n      return style;\n    }\n  }\n});\n","wxml":"<wxs src=\"../wxs/utils.wxs\" module=\"utils\" />\n\n<view class=\"van-stepper custom-class\">\n  <view\n    wx:if=\"{{ showMinus }}\"\n    data-type=\"minus\"\n    style=\"{{ buttonStyle }}\"\n    class=\"minus-class {{ utils.bem('stepper__minus', { disabled: disabled || value <= min }) }}\"\n    hover-class=\"van-stepper__minus--hover\"\n    hover-stay-time=\"70\"\n    bind:tap=\"onTap\"\n    bind:touchstart=\"onTouchStart\"\n    bind:touchend=\"onTouchEnd\"\n  />\n  <input\n    type=\"{{ integer ? 'number' : 'digit' }}\"\n    class=\"input-class {{ utils.bem('stepper__input', { disabled: disabled || disableInput }) }}\"\n    style=\"{{ inputStyle }}\"\n    value=\"{{ value }}\"\n    focus=\"{{ focus }}\"\n    disabled=\"{{ disabled || disableInput }}\"\n    bindinput=\"onInput\"\n    bind:focus=\"onFocus\"\n    bind:blur=\"onBlur\"\n  />\n  <view\n    wx:if=\"{{ showPlus }}\"\n    data-type=\"plus\"\n    style=\"{{ buttonStyle }}\"\n    class=\"plus-class {{ utils.bem('stepper__plus', { disabled: disabled || value >= max }) }}\"\n    hover-class=\"van-stepper__plus--hover\"\n    hover-stay-time=\"70\"\n    bind:tap=\"onTap\"\n    bind:touchstart=\"onTouchStart\"\n    bind:touchend=\"onTouchEnd\"\n  />\n</view>\n"},"steps":{"ts":"import { VantComponent } from '../common/component';\nimport { GREEN } from '../common/color';\n\nVantComponent({\n  props: {\n    icon: String,\n    steps: Array,\n    active: Number,\n    direction: {\n      type: String,\n      value: 'horizontal'\n    },\n    activeColor: {\n      type: String,\n      value: GREEN\n    },\n    activeIcon: {\n      type: String,\n      value: 'checked'\n    },\n    inactiveIcon: String\n  }\n});\n","wxml":"<wxs src=\"../wxs/utils.wxs\" module=\"utils\" />\n\n<view class=\"custom-class {{ utils.bem('steps', [direction]) }}\">\n  <view class=\"van-step__wrapper\">\n    <view\n      wx:for=\"{{ steps }}\"\n      wx:key=\"index\"\n      class=\"{{ utils.bem('step', [direction, status(index, active)]) }} van-hairline\"\n    >\n      <view class=\"van-step__title\" style=\"{{ index === active ? 'color: ' + activeColor : '' }}\">\n        <view>{{ item.text }}</view>\n        <view>{{ item.desc }}</view>\n      </view>\n      <view class=\"van-step__circle-container\">\n        <block wx:if=\"{{ index !== active }}\">\n          <van-icon\n            wx:if=\"{{ inactiveIcon }}\"\n            color=\"#969799\"\n            name=\"{{ inactiveIcon }}\"\n            custom-class=\"van-step__icon\"\n          />\n          <view\n            wx:else\n            class=\"van-step__circle\"\n            style=\"{{ index < active ? 'background-color: ' + activeColor : '' }}\"\n          />\n        </block>\n\n        <van-icon wx:else name=\"{{ activeIcon }}\" color=\"{{ activeColor }}\" custom-class=\"van-step__icon\" />\n      </view>\n      <view\n        wx:if=\"{{ index !== steps.length - 1 }}\"\n        class=\"van-step__line\" style=\"{{ index < active ? 'background-color: ' + activeColor : '' }}\"\n      />\n    </view>\n  </view>\n</view>\n\n<wxs module=\"status\">\nfunction get(index, active) {\n  if (index < active) {\n    return 'finish';\n  } else if (index === active) {\n    return 'process';\n  }\n\n  return '';\n}\n\nmodule.exports = get;\n</wxs>\n"},"sticky":{"ts":"import { VantComponent } from '../common/component';\nimport { nextTick } from '../common/utils';\n\ntype Position = 'top' | 'bottom' | '';\n\nVantComponent({\n  props: {\n    zIndex: {\n      type: Number,\n      value: 99\n    },\n    offsetTop: {\n      type: Number,\n      value: 0\n    }\n  },\n\n  data: {\n    position: '', // 当前定位\n    height: 0,\n    wrapStyle: '',\n    containerStyle: ''\n  },\n\n  methods: {\n    setWrapStyle() {\n      const { offsetTop, position } = this.data;\n      let wrapStyle: string;\n      let containerStyle: string;\n\n      switch (position) {\n        case 'top':\n          wrapStyle = `\n            top: ${offsetTop}px;\n            position: fixed;\n          `;\n          containerStyle = `height: ${this.itemHeight}px;`;\n          break;\n        case 'bottom':\n          wrapStyle = `\n            top: auto;\n            bottom: 0;\n          `;\n          containerStyle = '';\n          break;\n        default:\n          wrapStyle = '';\n          containerStyle = '';\n      }\n\n      const data: Record<string, string> = {};\n\n      if (wrapStyle !== this.data.wrapStyle) {\n        data.wrapStyle = wrapStyle;\n      }\n\n      if (containerStyle !== this.data.containerStyle) {\n        data.containerStyle = containerStyle;\n      }\n\n      if (JSON.stringify(data) !== '{}') {\n        this.setData(data);\n      }\n    },\n\n    setPosition(position: Position) {\n      if (position !== this.data.position) {\n        this.setData({ position });\n        nextTick(() => {\n          this.setWrapStyle();\n        });\n      }\n    },\n\n    observerContentScroll() {\n      const { offsetTop = 0 } = this.data;\n      const { windowHeight } = wx.getSystemInfoSync();\n\n      this.createIntersectionObserver({}).disconnect();\n\n      // @ts-ignore\n      this.createIntersectionObserver()\n        .relativeToViewport({ top: -(this.itemHeight + offsetTop) })\n        .observe(\n          '.van-sticky',\n          (res: WechatMiniprogram.ObserveCallbackResult) => {\n            const { top } = res.boundingClientRect;\n\n            if (top > offsetTop) {\n              return;\n            }\n\n            const position: Position = 'top';\n\n            this.$emit('scroll', {\n              scrollTop: top + offsetTop,\n              isFixed: true\n            });\n\n            this.setPosition(position);\n          }\n        );\n\n      // @ts-ignore\n      this.createIntersectionObserver()\n        .relativeToViewport({ bottom: -(windowHeight - 1 - offsetTop) })\n        .observe(\n          '.van-sticky',\n          (res: WechatMiniprogram.ObserveCallbackResult) => {\n            const { top, bottom } = res.boundingClientRect;\n\n            if (bottom <= this.itemHeight - 1) {\n              return;\n            }\n\n            const position: Position = res.intersectionRatio > 0 ? 'top' : '';\n\n            this.$emit('scroll', {\n              scrollTop: top + offsetTop,\n              isFixed: position === 'top'\n            });\n\n            this.setPosition(position);\n          }\n        );\n    }\n  },\n\n  mounted() {\n    this.getRect('.van-sticky').then(\n      (rect: WechatMiniprogram.BoundingClientRectCallbackResult) => {\n        this.itemHeight = rect.height;\n        this.itemTop = rect.top;\n        this.observerContentScroll();\n      }\n    );\n  },\n\n  destroyed() {\n    this.createIntersectionObserver({}).disconnect();\n  }\n});\n","wxml":"<view class=\"custom-class van-sticky\" style=\"z-index: {{ zIndex }}; {{ containerStyle }}\">\n  <view class=\"van-sticky-wrap\" style=\"{{ wrapStyle }}\">\n    <slot />\n  </view>\n</view>\n"},"submit-bar":{"ts":"import { VantComponent } from '../common/component';\nimport { Weapp } from 'definitions/weapp';\n\nVantComponent({\n  classes: [\n    'bar-class',\n    'price-class',\n    'button-class'\n  ],\n\n  props: {\n    tip: {\n      type: null,\n      observer: 'updateTip'\n    },\n    tipIcon: String,\n    type: Number,\n    price: {\n      type: null,\n      observer: 'updatePrice'\n    },\n    label: String,\n    loading: Boolean,\n    disabled: Boolean,\n    buttonText: String,\n    currency: {\n      type: String,\n      value: '¥'\n    },\n    buttonType: {\n      type: String,\n      value: 'danger'\n    },\n    decimalLength: {\n      type: Number,\n      value: 2,\n      observer: 'updatePrice'\n    },\n    suffixLabel: String,\n    safeAreaInsetBottom: {\n      type: Boolean,\n      value: true\n    }\n  },\n\n  methods: {\n    updatePrice() {\n      const { price, decimalLength } = this.data;\n      this.setData({\n        hasPrice: typeof price === 'number',\n        priceStr: (price / 100).toFixed(decimalLength)\n      });\n    },\n\n    updateTip() {\n      this.setData({ hasTip: typeof this.data.tip === 'string' });\n    },\n\n    onSubmit(event: Weapp.Event) {\n      this.$emit('submit', event.detail);\n    }\n  }\n});\n","wxml":"<wxs src=\"../wxs/utils.wxs\" module=\"utils\" />\n\n<view class=\"van-submit-bar custom-class\">\n  <slot name=\"top\" />\n\n  <view class=\"van-submit-bar__tip\">\n    <van-icon\n      wx:if=\"{{ tipIcon }}\"\n      size=\"12px\"\n      name=\"{{ tipIcon }}\"\n      custom-class=\"van-submit-bar__tip-icon\"\n    />\n    <view wx:if=\"{{ hasTip }}\" class=\"van-submit-bar__tip-text\">\n      {{ tip }}\n    </view>\n    <slot name=\"tip\" />\n  </view>\n\n  <view class=\"bar-class {{ utils.bem('submit-bar__bar', { safe: safeAreaInsetBottom }) }}\">\n    <slot />\n    <view wx:if=\"{{ hasPrice }}\" class=\"van-submit-bar__text\">\n      <text>{{ label || '合计：' }}</text>\n      <text class=\"van-submit-bar__price price-class\">\n        <text class=\"van-submit-bar__currency\">{{ currency }} </text>\n        <text>{{ priceStr }}</text>\n      </text>\n      <text class=\"van-submit-bar__suffix-label\">{{ suffixLabel }}</text>\n    </view>\n    <van-button\n      square\n      size=\"large\"\n      type=\"{{ buttonType }}\"\n      loading=\"{{ loading }}\"\n      disabled=\"{{ disabled }}\"\n      class=\"van-submit-bar__button\"\n      custom-class=\"button-class\"\n      bind:click=\"onSubmit\"\n    >\n      {{ loading ? '' : buttonText }}\n    </van-button>\n  </view>\n</view>\n"},"swipe-cell":{"ts":"import { VantComponent } from '../common/component';\nimport { touch } from '../mixins/touch';\nimport { Weapp } from 'definitions/weapp';\n\nconst THRESHOLD = 0.3;\nlet ARRAY: WechatMiniprogram.Component.TrivialInstance[] = [];\n\nVantComponent({\n  props: {\n    disabled: Boolean,\n    leftWidth: {\n      type: Number,\n      value: 0\n    },\n    rightWidth: {\n      type: Number,\n      value: 0\n    },\n    asyncClose: Boolean,\n    name: {\n      type: [Number, String],\n      value: ''\n    }\n  },\n\n  mixins: [touch],\n\n  data: {\n    catchMove: false\n  },\n\n  created() {\n    this.offset = 0;\n    ARRAY.push(this);\n  },\n\n  destroyed() {\n    ARRAY = ARRAY.filter(item => item !== this);\n  },\n\n  methods: {\n    open(position: 'left' | 'right') {\n      const { leftWidth, rightWidth } = this.data;\n      const offset = position === 'left' ? leftWidth : -rightWidth;\n      this.swipeMove(offset);\n    },\n\n    close() {\n      this.swipeMove(0);\n    },\n\n    swipeMove(offset: number = 0) {\n      this.offset = offset;\n\n      const transform = `translate3d(${offset}px, 0, 0)`;\n      const transition = this.draging\n        ? 'none'\n        : 'transform .6s cubic-bezier(0.18, 0.89, 0.32, 1)';\n\n      this.setData({\n        wrapperStyle: `\n        -webkit-transform: ${transform};\n        -webkit-transition: ${transition};\n        transform: ${transform};\n        transition: ${transition};\n      `\n      });\n    },\n\n    swipeLeaveTransition() {\n      const { leftWidth, rightWidth } = this.data;\n      const { offset } = this;\n\n      if (rightWidth > 0 && -offset > rightWidth * THRESHOLD) {\n        this.open('right');\n      } else if (leftWidth > 0 && offset > leftWidth * THRESHOLD) {\n        this.open('left');\n      } else {\n        this.swipeMove(0);\n      }\n      this.setData({ catchMove: false });\n    },\n\n    startDrag(event: Weapp.TouchEvent) {\n      if (this.data.disabled) {\n        return;\n      }\n\n      ARRAY.forEach(item => {\n        if (item !== this) {\n          item.close();\n        }\n      });\n\n      this.draging = true;\n      this.startOffset = this.offset;\n      this.firstDirection = '';\n      this.touchStart(event);\n    },\n\n    noop() {},\n\n    onDrag(event: Weapp.TouchEvent) {\n      if (this.data.disabled) {\n        return;\n      }\n\n      this.touchMove(event);\n\n      if (!this.firstDirection) {\n        this.firstDirection = this.direction;\n        this.setData({ catchMove: this.firstDirection === 'horizontal' });\n      }\n\n      if (this.firstDirection === 'vertical') {\n        return;\n      }\n\n      const { leftWidth, rightWidth } = this.data;\n\n      const offset = this.startOffset + this.deltaX;\n\n      if (\n        (rightWidth > 0 && -offset > rightWidth) ||\n        (leftWidth > 0 && offset > leftWidth)\n      ) {\n        return;\n      }\n\n      this.swipeMove(offset);\n    },\n\n    endDrag() {\n      if (this.data.disabled) {\n        return;\n      }\n\n      this.draging = false;\n      this.swipeLeaveTransition();\n    },\n\n    onClick(event: Weapp.Event) {\n      const { key: position = 'outside' } = event.currentTarget.dataset;\n      this.$emit('click', position);\n\n      if (!this.offset) {\n        return;\n      }\n\n      if (this.data.asyncClose) {\n        this.$emit('close', { position, instance: this, name: this.data.name });\n      } else {\n        this.swipeMove(0);\n      }\n    }\n  }\n});\n","wxml":"<view\n  class=\"van-swipe-cell\"\n  data-key=\"cell\"\n  catchtap=\"onClick\"\n  bindtouchstart=\"startDrag\"\n  catchtouchmove=\"{{ catchMove ? 'noop' : '' }}\"\n  capture-bind:touchmove=\"onDrag\"\n  catchtouchend=\"endDrag\"\n  catchtouchcancel=\"endDrag\"\n>\n  <view style=\"{{ wrapperStyle }}\">\n    <view wx:if=\"{{ leftWidth }}\" class=\"van-swipe-cell__left\" data-key=\"left\" catch:tap=\"onClick\">\n      <slot name=\"left\" />\n    </view>\n    <slot />\n    <view wx:if=\"{{ rightWidth }}\" class=\"van-swipe-cell__right\" data-key=\"right\" catch:tap=\"onClick\">\n      <slot name=\"right\" />\n    </view>\n  </view>\n</view>\n"},"switch":{"ts":"import { VantComponent } from '../common/component';\nimport { BLUE, GRAY_DARK } from '../common/color';\n\nVantComponent({\n  field: true,\n\n  classes: ['node-class'],\n\n  props: {\n    checked: null,\n    loading: Boolean,\n    disabled: Boolean,\n    activeColor: String,\n    inactiveColor: String,\n    size: {\n      type: String,\n      value: '30px'\n    },\n    activeValue: {\n      type: null,\n      value: true\n    },\n    inactiveValue: {\n      type: null,\n      value: false\n    }\n  },\n\n  watch: {\n    checked(value) {\n      const loadingColor = this.getLoadingColor(value);\n      this.setData({ value, loadingColor });\n    }\n  },\n\n  created() {\n    const { checked: value } = this.data;\n    const loadingColor = this.getLoadingColor(value);\n\n    this.setData({ value, loadingColor });\n  },\n\n  methods: {\n    getLoadingColor(checked) {\n      const { activeColor, inactiveColor } = this.data;\n      return checked ? activeColor || BLUE : inactiveColor || GRAY_DARK;\n    },\n\n    onClick() {\n      const { activeValue, inactiveValue } = this.data;\n      if (!this.data.disabled && !this.data.loading) {\n        const checked = this.data.checked === activeValue;\n        const value = checked ? inactiveValue : activeValue;\n        this.$emit('input', value);\n        this.$emit('change', value);\n      }\n    }\n  }\n});\n","wxml":"<wxs src=\"../wxs/utils.wxs\" module=\"utils\" />\n\n<view\n  class=\"custom-class {{ utils.bem('switch', { on: value === activeValue, disabled }) }}\"\n  style=\"font-size: {{ size }}; {{ (checked ? activeColor : inactiveColor) ? 'background-color: ' + (checked ? activeColor : inactiveColor ) : '' }}\"\n  bind:tap=\"onClick\"\n>\n  <view class=\"van-switch__node node-class\">\n    <van-loading wx:if=\"{{ loading }}\" color=\"{{ loadingColor }}\" size=\"50%\" custom-class=\"van-switch__loading\" />\n  </view>\n</view>\n"},"tab":{"ts":"import { VantComponent } from '../common/component';\n\nVantComponent({\n  relation: {\n    name: 'tabs',\n    type: 'ancestor'\n  },\n\n  props: {\n    dot: Boolean,\n    info: null,\n    title: String,\n    disabled: Boolean,\n    titleStyle: String,\n    name: {\n      type: [Number, String],\n      value: '',\n      observer: 'setComputedName'\n    }\n  },\n\n  data: {\n    width: null,\n    inited: false,\n    active: false,\n    animated: false\n  },\n\n  watch: {\n    title: 'update',\n    disabled: 'update',\n    dot: 'update',\n    info: 'update',\n    titleStyle: 'update'\n  },\n\n  methods: {\n    setComputedName() {\n      this.computedName = this.data.name || this.index;\n    },\n\n    update() {\n      const parent = this.getRelationNodes('../tabs/index')[0];\n      if (parent) {\n        parent.updateTabs();\n      }\n    }\n  }\n});\n","wxml":"<wxs src=\"../wxs/utils.wxs\" module=\"utils\" />\n\n<view\n  wx:if=\"{{ animated || inited }}\"\n  class=\"custom-class {{ utils.bem('tab__pane', { active, inactive: !active }) }}\"\n  style=\"{{ animated || active ? '' : 'display: none;' }} {{ width ? 'width:' + width + 'px;' : '' }}\"\n>\n  <slot />\n</view>\n"},"tabbar":{"ts":"import { VantComponent } from '../common/component';\n\nVantComponent({\n  relation: {\n    name: 'tabbar-item',\n    type: 'descendant',\n    linked(target) {\n      this.children.push(target);\n      target.parent = this;\n      target.updateFromParent();\n    },\n    unlinked(target) {\n      this.children = this.children.filter(\n        (item: WechatMiniprogram.Component.TrivialInstance) => item !== target\n      );\n      this.updateChildren();\n    }\n  },\n\n  props: {\n    active: {\n      type: null,\n      observer: 'updateChildren'\n    },\n    activeColor: {\n      type: String,\n      observer: 'updateChildren'\n    },\n    inactiveColor: {\n      type: String,\n      observer: 'updateChildren'\n    },\n    fixed: {\n      type: Boolean,\n      value: true\n    },\n    border: {\n      type: Boolean,\n      value: true\n    },\n    zIndex: {\n      type: Number,\n      value: 1\n    },\n    safeAreaInsetBottom: {\n      type: Boolean,\n      value: true\n    }\n  },\n\n  beforeCreate() {\n    this.children = [];\n  },\n\n  methods: {\n    updateChildren() {\n      const { children } = this;\n      if (!Array.isArray(children) || !children.length) {\n        return Promise.resolve();\n      }\n\n      return Promise.all(\n        children.map((child: WechatMiniprogram.Component.TrivialInstance) => child.updateFromParent())\n      );\n    },\n\n    onChange(child: WechatMiniprogram.Component.TrivialInstance) {\n      const index = this.children.indexOf(child);\n      const active = child.data.name || index;\n\n      if (active !== this.data.active) {\n        this.$emit('change', active);\n      }\n    }\n  }\n});\n","wxml":"<wxs src=\"../wxs/utils.wxs\" module=\"utils\" />\n\n<view\n  class=\"custom-class {{ border ? 'van-hairline--top-bottom' : '' }} {{ utils.bem('tabbar', { fixed, safe: safeAreaInsetBottom }) }}\"\n  style=\"{{ zIndex ? 'z-index: ' + zIndex : '' }}\"\n>\n  <slot />\n</view>\n"},"tabbar-item":{"ts":"import { VantComponent } from '../common/component';\n\nVantComponent({\n  props: {\n    info: null,\n    name: null,\n    icon: String,\n    dot: Boolean\n  },\n\n  relation: {\n    name: 'tabbar',\n    type: 'ancestor'\n  },\n\n  data: {\n    active: false\n  },\n\n  methods: {\n    onClick() {\n      if (this.parent) {\n        this.parent.onChange(this);\n      }\n      this.$emit('click');\n    },\n\n    updateFromParent() {\n      const { parent } = this;\n      if (!parent) {\n        return;\n      }\n\n      const index = parent.children.indexOf(this);\n      const parentData = parent.data;\n      const { data } = this;\n      const active = (data.name || index) === parentData.active;\n      const patch: { [key: string]: any } = {};\n\n      if (active !== data.active) {\n        patch.active = active;\n      }\n      if (parentData.activeColor !== data.activeColor) {\n        patch.activeColor = parentData.activeColor;\n      }\n      if (parentData.inactiveColor !== data.inactiveColor) {\n        patch.inactiveColor = parentData.inactiveColor;\n      }\n\n      return Object.keys(patch).length > 0\n        ? this.set(patch)\n        : Promise.resolve();\n    }\n  }\n});\n","wxml":"<wxs src=\"../wxs/utils.wxs\" module=\"utils\" />\n\n<view\n  class=\"{{ utils.bem('tabbar-item', { active }) }} custom-class\"\n  style=\"color: {{ active ? activeColor : inactiveColor }}\"\n  bind:tap=\"onClick\"\n>\n  <view class=\"{{ utils.bem('tabbar-item__icon', { dot }) }}\">\n    <van-icon\n      wx:if=\"{{ icon }}\"\n      name=\"{{ icon }}\"\n      customStyle=\"display: block\"\n    />\n    <block wx:else>\n      <slot\n        wx:if=\"{{ active }}\"\n        name=\"icon-active\"\n      />\n      <slot wx:else name=\"icon\" />\n    </block>\n    <van-info\n      wx:if=\"{{ info !== null }}\"\n      info=\"{{ info }}\"\n      custom-style=\"margin-top: 2px\"\n    />\n  </view>\n  <view class=\"van-tabbar-item__text\">\n    <slot />\n  </view>\n</view>\n"},"tabs":{"ts":"import { VantComponent } from '../common/component';\nimport { touch } from '../mixins/touch';\nimport { Weapp } from 'definitions/weapp';\nimport { nextTick, isDef, addUnit } from '../common/utils';\n\ntype TabItemData = {\n  width?: number\n  active: boolean\n  inited?: boolean\n  animated?: boolean\n  name?: string | number\n};\n\ntype Position = 'top' | 'bottom' | '';\n\nVantComponent({\n  mixins: [touch],\n\n  classes: ['nav-class', 'tab-class', 'tab-active-class', 'line-class'],\n\n  relation: {\n    name: 'tab',\n    type: 'descendant',\n    linked(child) {\n      child.index = this.children.length;\n      child.setComputedName();\n      this.children.push(child);\n      this.updateTabs(this.data.tabs.concat(child.data));\n    },\n    unlinked(child) {\n      const index = this.children.indexOf(child);\n      const { tabs } = this.data;\n      tabs.splice(index, 1);\n      this.children.splice(index, 1);\n\n      let i = index;\n      while (i >= 0 && i < this.children.length) {\n        const currentChild = this.children[i];\n        currentChild.index--;\n        currentChild.setComputedName();\n        i++;\n      }\n\n      this.updateTabs(tabs);\n    }\n  },\n\n  props: {\n    color: String,\n    sticky: Boolean,\n    animated: Boolean,\n    swipeable: Boolean,\n    lineWidth: {\n      type: [String, Number],\n      value: -1\n    },\n    lineHeight: {\n      type: [String, Number],\n      value: -1\n    },\n    active: {\n      type: [String, Number],\n      value: 0,\n    },\n    type: {\n      type: String,\n      value: 'line'\n    },\n    border: {\n      type: Boolean,\n      value: true\n    },\n    duration: {\n      type: Number,\n      value: 0.3\n    },\n    zIndex: {\n      type: Number,\n      value: 1\n    },\n    swipeThreshold: {\n      type: Number,\n      value: 4\n    },\n    offsetTop: {\n      type: Number,\n      value: 0\n    }\n  },\n\n  data: {\n    tabs: [],\n    lineStyle: '',\n    scrollLeft: 0,\n    scrollable: false,\n    trackStyle: '',\n    wrapStyle: '',\n    position: '',\n    currentIndex: 0,\n  },\n\n  watch: {\n    swipeThreshold() {\n      this.setData({\n        scrollable: this.children.length > this.data.swipeThreshold\n      });\n    },\n    color: 'setLine',\n    lineWidth: 'setLine',\n    lineHeight: 'setLine',\n    active: 'setActiveTab',\n    animated: 'setTrack',\n    offsetTop: 'setWrapStyle'\n  },\n\n  beforeCreate() {\n    this.children = [];\n  },\n\n  mounted() {\n    this.setLine(true);\n    this.setTrack();\n    this.scrollIntoView();\n    this.getRect('.van-tabs__wrap').then(\n      (rect: WechatMiniprogram.BoundingClientRectCallbackResult) => {\n        this.navHeight = rect.height;\n        this.observerContentScroll();\n      }\n    );\n  },\n\n  destroyed() {\n    // @ts-ignore\n    this.createIntersectionObserver().disconnect();\n  },\n\n  methods: {\n    updateTabs(tabs: TabItemData[]) {\n      tabs = tabs || this.data.tabs;\n      this.setData({\n        tabs,\n        scrollable: tabs.length > this.data.swipeThreshold\n      });\n      this.setActiveTab();\n    },\n\n    trigger(eventName: string, name: string | number) {\n      const { tabs, currentIndex } = this.data;\n\n      this.$emit(eventName, {\n        name,\n        title: tabs[currentIndex].title\n      });\n    },\n\n    onTap(event: Weapp.Event) {\n      const { index } = event.currentTarget.dataset;\n      const child = this.children[index];\n      if (this.data.tabs[index].disabled) {\n        this.trigger('disabled', child.computedName);\n      } else {\n        this.trigger('click', child.computedName);\n        this.setActive(child.computedName);\n      }\n    },\n\n    setActive(computedName) {\n      if (computedName !== this.currentName) {\n        this.currentName = computedName;\n        this.trigger('change', computedName);\n        this.setActiveTab();\n      }\n    },\n\n    setLine(skipTransition?: boolean) {\n      if (this.data.type !== 'line') {\n        return;\n      }\n\n      const { color, duration, currentIndex, lineWidth, lineHeight } = this.data;\n\n      this.getRect('.van-tab', true).then(\n        (rects: WechatMiniprogram.BoundingClientRectCallbackResult[]) => {\n          const rect = rects[currentIndex];\n          const width = lineWidth !== -1 ? lineWidth : rect.width / 2;\n          const height = lineHeight !== -1 ? `height: ${addUnit(lineHeight)}; border-radius: ${addUnit(lineHeight)};` : '';\n\n          let left = rects\n            .slice(0, currentIndex)\n            .reduce((prev, curr) => prev + curr.width, 0);\n\n          left += (rect.width - width) / 2;\n\n          const transition = skipTransition\n            ? ''\n            : `transition-duration: ${duration}s; -webkit-transition-duration: ${duration}s;`;\n\n          this.setData({\n            lineStyle: `\n            ${height}\n            width: ${addUnit(width)};\n            background-color: ${color};\n            -webkit-transform: translateX(${left}px);\n            transform: translateX(${left}px);\n            ${transition}\n          `\n          });\n        }\n      );\n    },\n\n    setTrack() {\n      const { animated, duration, currentIndex } = this.data;\n\n      if (!animated) return '';\n\n      this.getRect('.van-tabs__content').then(\n        (rect: WechatMiniprogram.BoundingClientRectCallbackResult) => {\n          const { width } = rect;\n\n          this.setData({\n            trackStyle: `\n              width: ${width * this.children.length}px;\n              left: ${-1 * currentIndex * width}px;\n              transition: left ${duration}s;\n              display: -webkit-box;\n              display: flex;\n            `\n          });\n\n          const data = { width, animated };\n\n          this.children.forEach((item: WechatMiniprogram.Component.TrivialInstance) => {\n            item.setData(data);\n          });\n        }\n      );\n    },\n\n    setActiveTab() {\n      if (!isDef(this.currentName)) {\n        this.currentName = this.data.active || (this.children[0] || {}).computedName;\n      }\n\n      this.children.forEach((item: WechatMiniprogram.Component.TrivialInstance, index: number) => {\n        const data: TabItemData = {\n          active: item.computedName === this.currentName\n        };\n\n        if (data.active) {\n          this.setData({\n            currentIndex: index\n          });\n          data.inited = true;\n        }\n\n        if (data.active !== item.data.active) {\n          item.setData(data);\n        }\n      });\n\n      nextTick(() => {\n        this.setLine();\n        this.setTrack();\n        this.scrollIntoView();\n      });\n    },\n\n    // scroll active tab into view\n    scrollIntoView() {\n      const { currentIndex, scrollable } = this.data;\n\n      if (!scrollable) {\n        return;\n      }\n\n      Promise.all([\n        this.getRect('.van-tab', true),\n        this.getRect('.van-tabs__nav')\n      ]).then(\n        ([tabRects, navRect]: [\n        WechatMiniprogram.BoundingClientRectCallbackResult[],\n        WechatMiniprogram.BoundingClientRectCallbackResult\n        ]) => {\n          const tabRect = tabRects[currentIndex];\n          const offsetLeft = tabRects\n            .slice(0, currentIndex)\n            .reduce((prev, curr) => prev + curr.width, 0);\n\n          this.setData({\n            scrollLeft: offsetLeft - (navRect.width - tabRect.width) / 2\n          });\n        }\n      );\n    },\n\n    onTouchStart(event: Weapp.TouchEvent) {\n      if (!this.data.swipeable) return;\n\n      this.touchStart(event);\n    },\n\n    onTouchMove(event: Weapp.TouchEvent) {\n      if (!this.data.swipeable) return;\n\n      this.touchMove(event);\n    },\n\n    // watch swipe touch end\n    onTouchEnd() {\n      if (!this.data.swipeable) return;\n\n      const { tabs, currentIndex } = this.data;\n\n      const { direction, deltaX, offsetX } = this;\n      const minSwipeDistance = 50;\n\n      if (direction === 'horizontal' && offsetX >= minSwipeDistance) {\n        if (deltaX > 0 && currentIndex !== 0) {\n          this.setActive(this.children[currentIndex - 1].computedName);\n        } else if (deltaX < 0 && currentIndex !== tabs.length - 1) {\n          this.setActive(this.children[currentIndex + 1].computedName);\n        }\n      }\n    },\n\n    setWrapStyle() {\n      const { offsetTop, position } = this.data as {\n        offsetTop: number\n        position: Position\n      };\n      let wrapStyle: string;\n\n      switch (position) {\n        case 'top':\n          wrapStyle = `\n            top: ${offsetTop}px;\n            position: fixed;\n          `;\n          break;\n        case 'bottom':\n          wrapStyle = `\n            top: auto;\n            bottom: 0;\n          `;\n          break;\n        default:\n          wrapStyle = '';\n      }\n\n      if (wrapStyle !== this.data.wrapStyle) {\n        this.setData({ wrapStyle });\n      }\n    },\n\n    observerContentScroll() {\n      if (!this.data.sticky) {\n        return;\n      }\n\n      const { offsetTop } = this.data;\n      const { windowHeight } = wx.getSystemInfoSync();\n\n      // @ts-ignore\n      this.createIntersectionObserver().disconnect();\n\n      // @ts-ignore\n      this.createIntersectionObserver()\n        .relativeToViewport({ top: -(this.navHeight + offsetTop) })\n        .observe('.van-tabs', (res: WechatMiniprogram.ObserveCallbackResult) => {\n          const { top } = res.boundingClientRect;\n\n          if (top > offsetTop) {\n            return;\n          }\n\n          const position: Position =\n            res.intersectionRatio > 0 ? 'top' : 'bottom';\n\n          this.$emit('scroll', {\n            scrollTop: top + offsetTop,\n            isFixed: position === 'top'\n          });\n\n          this.setPosition(position);\n        });\n\n      // @ts-ignore\n      this.createIntersectionObserver()\n        .relativeToViewport({ bottom: -(windowHeight - 1 - offsetTop) })\n        .observe('.van-tabs', (res: WechatMiniprogram.ObserveCallbackResult) => {\n          const { top, bottom } = res.boundingClientRect;\n\n          if (bottom < this.navHeight) {\n            return;\n          }\n\n          const position: Position = res.intersectionRatio > 0 ? 'top' : '';\n\n          this.$emit('scroll', {\n            scrollTop: top + offsetTop,\n            isFixed: position === 'top'\n          });\n\n          this.setPosition(position);\n        });\n    },\n\n    setPosition(position: Position) {\n      if (position !== this.data.position) {\n        this.set({ position }).then(() => {\n          this.setWrapStyle();\n        });\n      }\n    }\n  }\n});\n","wxml":"<wxs src=\"../wxs/utils.wxs\" module=\"utils\" />\n\n<view class=\"custom-class {{ utils.bem('tabs', [type]) }}\">\n  <view style=\"z-index: {{ zIndex }}; {{ wrapStyle }}\" class=\"{{ utils.bem('tabs__wrap', { scrollable }) }} {{ type === 'line' && border ? 'van-hairline--top-bottom' : '' }}\">\n    <slot name=\"nav-left\" />\n\n    <scroll-view\n      scroll-x=\"{{ scrollable }}\"\n      scroll-with-animation\n      scroll-left=\"{{ scrollLeft }}\"\n      class=\"van-tabs__scroll--{{ type }}\"\n      style=\"{{ color ? 'border-color: ' + color : '' }}\"\n    >\n      <view class=\"{{ utils.bem('tabs__nav', [type]) }} nav-class\">\n        <view wx:if=\"{{ type === 'line' }}\" class=\"van-tabs__line\" style=\"{{ lineStyle }}\" />\n        <view\n          wx:for=\"{{ tabs }}\"\n          wx:key=\"index\"\n          data-index=\"{{ index }}\"\n          class=\"van-ellipsis tab-class {{ index === currentIndex ? 'tab-active-class' : '' }} {{ utils.bem('tab', { active: index === currentIndex, disabled: item.disabled }) }}\"\n          style=\"{{ color && index !== currentIndex && type === 'card' && !item.disabled ? 'color: ' + color : '' }} {{ color && index === currentIndex && type === 'card' ? ';background-color:' + color : '' }} {{ color ? ';border-color: ' + color : '' }} {{ scrollable ? ';flex-basis:' + (88 / swipeThreshold) + '%' : '' }}\"\n          bind:tap=\"onTap\"\n        >\n          <view class=\"van-ellipsis\" style=\"{{ item.titleStyle }}\">\n            {{ item.title }}\n            <van-info\n              wx:if=\"{{ item.info !== null || item.dot }}\"\n              info=\"{{ item.info }}\"\n              dot=\"{{ item.dot }}\"\n              custom-class=\"van-tab__title__info\"\n            />\n          </view>\n        </view>\n      </view>\n    </scroll-view>\n\n    <slot name=\"nav-right\" />\n  </view>\n  <view\n    class=\"van-tabs__content\"\n    bind:touchstart=\"onTouchStart\"\n    bind:touchmove=\"onTouchMove\"\n    bind:touchend=\"onTouchEnd\"\n    bind:touchcancel=\"onTouchEnd\"\n  >\n    <view class=\"van-tabs__track\" style=\"{{ trackStyle }}\">\n      <slot />\n    </view>\n  </view>\n</view>\n"},"tag":{"ts":"import { VantComponent } from '../common/component';\n\nVantComponent({\n  props: {\n    size: String,\n    mark: Boolean,\n    color: String,\n    plain: Boolean,\n    round: Boolean,\n    textColor: String,\n    type: {\n      type: String,\n      value: 'default'\n    }\n  }\n});\n","wxml":"<wxs src=\"../wxs/utils.wxs\" module=\"utils\" />\n\n<view\n  class=\"custom-class {{ utils.bem('tag', [type, size, { mark, plain, round }]) }} {{ plain ? 'van-hairline--surround' : '' }}\"\n  style=\"{{ color && !plain ? 'background-color: ' + color + ';' : '' }}{{ textColor || (color && plain) ? 'color: ' + (textColor || color) : '' }}\"\n>\n  <slot />\n</view>\n"},"toast":{"ts":"import { isObj } from '../common/utils';\n\ntype ToastMessage = string | number;\n\ninterface ToastOptions {\n  show?: boolean;\n  type?: string;\n  mask?: boolean;\n  zIndex?: number;\n  context?: WechatMiniprogram.Component.TrivialInstance | WechatMiniprogram.Page.TrivialInstance;\n  position?: string;\n  duration?: number;\n  selector?: string;\n  forbidClick?: boolean;\n  loadingType?: string;\n  message?: ToastMessage;\n  onClose?: () => void;\n}\n\nconst defaultOptions = {\n  type: 'text',\n  mask: false,\n  message: '',\n  show: true,\n  zIndex: 1000,\n  duration: 3000,\n  position: 'middle',\n  forbidClick: false,\n  loadingType: 'circular',\n  selector: '#van-toast'\n};\n\nlet queue = [];\nlet currentOptions: ToastOptions = { ...defaultOptions };\n\nfunction parseOptions(message): ToastOptions {\n  return isObj(message) ? message : { message };\n}\n\nfunction getContext() {\n  const pages = getCurrentPages();\n  return pages[pages.length - 1];\n}\n\nfunction Toast(toastOptions: ToastOptions | ToastMessage): WechatMiniprogram.Component.TrivialInstance {\n  const options = {\n    ...currentOptions,\n    ...parseOptions(toastOptions)\n  } as ToastOptions;\n\n  const context = options.context || getContext();\n  const toast = context.selectComponent(options.selector);\n\n  if (!toast) {\n    console.warn('未找到 van-toast 节点，请确认 selector 及 context 是否正确');\n    return;\n  }\n\n  delete options.context;\n  delete options.selector;\n\n  toast.clear = () => {\n    toast.setData({ show: false });\n\n    if (options.onClose) {\n      options.onClose();\n    }\n  };\n\n  queue.push(toast);\n  toast.setData(options);\n  clearTimeout(toast.timer);\n\n  if (options.duration > 0) {\n    toast.timer = setTimeout(() => {\n      toast.clear();\n      queue = queue.filter(item => item !== toast);\n    }, options.duration);\n  }\n\n  return toast;\n}\n\nconst createMethod = (type: string) => (options: ToastOptions | ToastMessage) =>\n  Toast({\n    type,\n    ...parseOptions(options)\n  });\n\nToast.loading = createMethod('loading');\nToast.success = createMethod('success');\nToast.fail = createMethod('fail');\n\nToast.clear = () => {\n  queue.forEach(toast => {\n    toast.clear();\n  });\n  queue = [];\n};\n\nToast.setDefaultOptions = (options: ToastOptions) => {\n  Object.assign(currentOptions, options);\n};\n\nToast.resetDefaultOptions = () => {\n  currentOptions = { ...defaultOptions };\n};\n\nexport default Toast;\n","wxml":"<van-overlay\n  wx:if=\"{{ mask || forbidClick }}\"\n  show=\"{{ show }}\"\n  z-index=\"{{ zIndex }}\"\n  custom-style=\"{{ mask ? '' : 'background-color: transparent;' }}\"\n/>\n<van-transition\n  show=\"{{ show }}\"\n  custom-style=\"z-index: {{ zIndex }}\"\n  custom-class=\"van-toast__container\"\n>\n  <view\n    class=\"van-toast van-toast--{{ type === 'text' ? 'text' : 'icon' }} van-toast--{{ position }}\"\n    catch:touchmove=\"noop\"\n  >\n    <!-- text only -->\n    <text wx:if=\"{{ type === 'text' }}\">{{ message }}</text>\n\n    <!-- with icon -->\n    <block wx:else>\n      <van-loading\n        wx:if=\"{{ type === 'loading' }}\"\n        color=\"white\"\n        type=\"{{ loadingType }}\"\n        custom-class=\"van-toast__loading\"\n      />\n      <van-icon wx:else class=\"van-toast__icon\" name=\"{{ type }}\" />\n      <text wx:if=\"{{ message }}\" class=\"van-toast__text\">{{ message }}</text>\n    </block>\n\n    <slot />\n  </view>\n</van-transition>\n"},"transition":{"ts":"import { VantComponent } from '../common/component';\nimport { transition } from '../mixins/transition';\n\nVantComponent({\n  classes: [\n    'enter-class',\n    'enter-active-class',\n    'enter-to-class',\n    'leave-class',\n    'leave-active-class',\n    'leave-to-class'\n  ],\n\n  mixins: [transition(true)]\n});\n","wxml":"<view\n  wx:if=\"{{ inited }}\"\n  class=\"van-transition custom-class {{ classes }}\"\n  style=\"-webkit-transition-duration:{{ currentDuration }}ms; transition-duration:{{ currentDuration }}ms; {{ display ? '' : 'display: none;' }} {{ customStyle }}\"\n  bind:transitionend=\"onTransitionEnd\"\n>\n  <slot />\n</view>\n"},"tree-select":{"ts":"import { VantComponent } from '../common/component';\nimport { Weapp } from 'definitions/weapp';\n\nconst ITEM_HEIGHT = 44;\n\nVantComponent({\n  classes: [\n    'main-item-class',\n    'content-item-class',\n    'main-active-class',\n    'content-active-class',\n    'main-disabled-class',\n    'content-disabled-class'\n  ],\n\n  props: {\n    items: Array,\n    activeId: null,\n    mainActiveIndex: {\n      type: Number,\n      value: 0\n    },\n    maxHeight: {\n      type: Number,\n      value: 300\n    },\n    max: {\n      type: Number,\n      value: Infinity\n    }\n  },\n\n  data: {\n    subItems: [],\n    mainHeight: 0,\n    itemHeight: 0\n  },\n\n  watch: {\n    items() {\n      this.updateSubItems().then(() => {\n        this.updateMainHeight();\n      });\n    },\n\n    maxHeight() {\n      this.updateItemHeight(this.data.subItems);\n      this.updateMainHeight();\n    },\n\n    mainActiveIndex: 'updateSubItems'\n  },\n\n  methods: {\n    // 当一个子项被选择时\n    onSelectItem(event: Weapp.Event) {\n      const { item } = event.currentTarget.dataset;\n      const isArray = Array.isArray(this.data.activeId);\n      // 判断有没有超出右侧选择的最大数\n      const isOverMax = isArray && (this.data.activeId.length >= this.data.max);\n      // 判断该项有没有被选中, 如果有被选中，则忽视是否超出的条件\n      const isSelected = isArray ? this.data.activeId.indexOf(item.id) > -1 : this.data.activeId === item.id;\n\n      if (!item.disabled && (!isOverMax || isSelected)) {\n        this.$emit('click-item', item);\n      }\n    },\n\n    // 当一个导航被点击时\n    onClickNav(event: Weapp.Event) {\n      const { index } = event.currentTarget.dataset;\n      const item = this.data.items[index];\n      if (!item.disabled) {\n        this.$emit('click-nav', { index });\n      }\n    },\n\n    // 更新子项列表\n    updateSubItems() {\n      const { items, mainActiveIndex } = this.data;\n      const { children = [] } = items[mainActiveIndex] || {};\n\n      this.updateItemHeight(children);\n      return this.set({ subItems: children });\n    },\n\n    // 更新组件整体高度，根据最大高度和当前组件需要展示的高度来决定\n    updateMainHeight() {\n      const { items = [], subItems = [] } = this.data;\n      const maxHeight = Math.max(\n        items.length * ITEM_HEIGHT,\n        subItems.length * ITEM_HEIGHT\n      );\n\n      this.setData({ mainHeight: Math.min(maxHeight, this.data.maxHeight) });\n    },\n\n    // 更新子项列表高度，根据可展示的最大高度和当前子项列表的高度决定\n    updateItemHeight(subItems) {\n      const itemHeight = Math.min(subItems.length * ITEM_HEIGHT, this.data.maxHeight);\n\n      return this.setData({ itemHeight });\n    }\n  }\n});\n","wxml":"<wxs src=\"../wxs/utils.wxs\" module=\"utils\" />\n<wxs src=\"./index.wxs\" module=\"wxs\" />\n\n<view\n  class=\"van-tree-select\"\n  style=\"height: {{ mainHeight }}px\"\n>\n  <scroll-view scroll-y class=\"van-tree-select__nav\">\n    <view\n      wx:for=\"{{ items }}\"\n      wx:key=\"index\"\n      class=\"van-ellipsis main-item-class {{ utils.bem('tree-select__nitem', { active: mainActiveIndex === index, disabled: item.disabled }) }} {{ mainActiveIndex === index ? 'main-active-class' : '' }} {{ item.disabled ? 'main-disabled-class' : '' }}\"\n      data-index=\"{{ index }}\"\n      bind:tap=\"onClickNav\"\n    >\n      {{ item.text }}\n    </view>\n  </scroll-view>\n  <scroll-view\n    scroll-y\n    class=\"van-tree-select__content\"\n    style=\"height: {{ itemHeight }}px\"\n  >\n    <slot name=\"content\" />\n    <view\n      wx:for=\"{{ subItems }}\"\n      wx:key=\"id\"\n      class=\"van-ellipsis van-hairline--bottom content-item-class {{ utils.bem('tree-select__item', { active: wxs.isActive(activeId, item.id), disabled: item.disabled }) }} {{ wxs.isActive(activeId, item.id) ? 'content-active-class' : '' }} {{ item.disabled ? 'content-disabled-class' : '' }}\"\n      data-item=\"{{ item }}\"\n      bind:tap=\"onSelectItem\"\n    >\n      {{ item.text }}\n      <van-icon\n        wx:if=\"{{ wxs.isActive(activeId, item.id) }}\"\n        name=\"checked\"\n        size=\"16px\"\n        class=\"van-tree-select__selected\"\n      />\n    </view>\n  </scroll-view>\n</view>\n"},"uploader":{"ts":"interface File {\n  path: string; // 上传临时地址\n  url: string; // 上传临时地址\n  size: number; // 上传大小\n  name: string; // 上传文件名称，accept=\"image\" 不存在\n  type: string; // 上传类型，accept=\"image\" 不存在\n  time: number; // 上传时间，accept=\"image\" 不存在\n  image: boolean; // 是否为图片\n}\n\nconst IMAGE_EXT = ['jpeg', 'jpg', 'gif', 'png', 'svg'];\n\nexport function isImageUrl(url: string): boolean {\n  return IMAGE_EXT.some(ext => url.indexOf(`.${ext}`) !== -1);\n}\n\nexport function isImageFile(item: File): boolean {\n  if (item.type) {\n    return item.type.indexOf('image') === 0;\n  }\n\n  if (item.path) {\n    return isImageUrl(item.path);\n  }\n\n  if (item.url) {\n    return isImageUrl(item.url);\n  }\n\n  return false;\n}\n","wxml":"<wxs src=\"../wxs/utils.wxs\" module=\"utils\" />\n\n<view\n  class=\"van-uploader\"\n>\n  <view class=\"van-uploader__wrapper\">\n    <!-- 预览样式 -->\n    <block wx:if=\"{{ previewImage }}\">\n      <view\n        wx:for=\"{{ lists  }}\"\n        wx:key=\"{{ index }}\"\n        class=\"van-uploader__preview\"\n      >\n        <image\n          wx:if=\"{{ item.isImage }}\"\n          mode=\"{{ imageFit }}\"\n          src=\"{{ item.url || item.path }}\"\n          alt=\"{{ item.name || ('图片' + index) }}\"\n          class=\"van-uploader__preview-image\"\n          style=\"width: {{ computedPreviewSize }}px; height: {{ computedPreviewSize }}px;\"\n          data-url=\"{{ item.url || item.path }}\"\n          bind:tap=\"doPreviewImage\"\n        />\n        <view\n          wx:else\n          class=\"van-uploader__file\"\n          style=\"width: {{ computedPreviewSize }}px; height: {{ computedPreviewSize }}px;\"\n        >\n          <van-icon name=\"description\" class=\"van-uploader__file-icon\" />\n          <view class=\"van-uploader__file-name van-ellipsis\">{{ item.name || item.url || item.path }}</view>\n        </view>\n        <van-icon\n          name=\"delete\"\n          class=\"van-uploader__preview-delete\"\n          bind:tap=\"deleteItem\"\n          data-index=\"{{ index }}\"\n        />\n      </view>\n    </block>\n    <!-- 上传样式 -->\n    <block wx:if=\"{{ isInCount }}\">\n      <block wx:if=\"{{ useSlot }}\">\n        <view class=\"van-uploader__slot\" bind:tap=\"startUpload\">\n          <slot />\n        </view>\n      </block>\n      <block wx:else>\n        <!-- 默认上传样式 -->\n        <view\n          class=\"van-uploader__upload\"\n          style=\"width: {{ computedPreviewSize }}px; height: {{ computedPreviewSize }}px;\"\n          bind:tap=\"startUpload\"\n        >\n          <van-icon name=\"plus\" class=\"van-uploader__upload-icon\" />\n          <text wx:if=\"{{ uploadText }}\" class=\"van-uploader__upload-text\">{{ uploadText }}</text>\n        </view>\n      </block>\n    </block>\n  </view>\n</view>\n"}}